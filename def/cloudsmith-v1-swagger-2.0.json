{
  "swagger": "2.0",
  "info": {
    "title": "Cloudsmith API (v1)",
    "description": "The API to the Cloudsmith Service",
    "termsOfService": "https://help.cloudsmith.io",
    "contact": {
      "name": "Cloudsmith Support",
      "url": "https://help.cloudsmith.io",
      "email": "support@cloudsmith.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "host": "api.cloudsmith.io",
  "schemes": [
    "https"
  ],
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "X-Api-Key",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "apikey": []
    },
    {
      "basic": []
    }
  ],
  "paths": {
    "/audit-log/{owner}/": {
      "get": {
        "operationId": "audit_log_namespace_list",
        "summary": "Lists audit log entries for a specific namespace.",
        "description": "Lists audit log entries for a specific namespace.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying events, actors, or timestamps of log records.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of audit log entries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NamespaceAuditLog"
              }
            }
          },
          "402": {
            "description": "Audit logs are not active; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "audit-log"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/audit-log/{owner}/{repo}/": {
      "get": {
        "operationId": "audit_log_repo_list",
        "summary": "Lists audit log entries for a specific repository.",
        "description": "Lists audit log entries for a specific repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying events, actors, or timestamps of log records.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of audit log entries",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepositoryAuditLog"
              }
            }
          },
          "402": {
            "description": "Audit logs are not active; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "audit-log"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/": {
      "get": {
        "operationId": "badges_version_list",
        "summary": "Get latest package version for a package or package group.",
        "description": "Get latest package version for a package or package group.",
        "parameters": [
          {
            "name": "badge_token",
            "in": "query",
            "description": "Badge token to authenticate for private packages",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "cacheSeconds",
            "in": "query",
            "description": "Override the shields.io badge cacheSeconds value.",
            "required": false,
            "type": "string",
            "default": "300"
          },
          {
            "name": "color",
            "in": "query",
            "description": "Override the shields.io badge color value.",
            "required": false,
            "type": "string",
            "default": "12577E"
          },
          {
            "name": "label",
            "in": "query",
            "description": "Override the shields.io badge label value.",
            "required": false,
            "type": "string",
            "default": "cloudsmith"
          },
          {
            "name": "labelColor",
            "in": "query",
            "description": "Override the shields.io badge labelColor value.",
            "required": false,
            "type": "string",
            "default": "021F2F"
          },
          {
            "name": "logoColor",
            "in": "query",
            "description": "Override the shields.io badge logoColor value.",
            "required": false,
            "type": "string",
            "default": "45B6EE"
          },
          {
            "name": "logoWidth",
            "in": "query",
            "description": "Override the shields.io badge logoWidth value.",
            "required": false,
            "type": "string",
            "default": "10"
          },
          {
            "name": "render",
            "in": "query",
            "description": "If true, badge will be rendered",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "shields",
            "in": "query",
            "description": "If true, a shields response will be generated",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "show_latest",
            "in": "query",
            "description": "If true, for latest version badges a '(latest)' suffix is added",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "style",
            "in": "query",
            "description": "Override the shields.io badge style value.",
            "required": false,
            "type": "string",
            "default": "flat-square"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageVersionBadge"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "badges"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package_format",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package_version",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package_identifiers",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/distros/": {
      "get": {
        "operationId": "distros_list",
        "summary": "Get a list of all supported distributions.",
        "description": "Get a list of all supported distributions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available package formats retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DistributionFull"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "distros"
        ]
      },
      "parameters": []
    },
    "/distros/{slug}/": {
      "get": {
        "operationId": "distros_read",
        "summary": "View for viewing/listing distributions.",
        "description": "View for viewing/listing distributions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DistributionFull"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "distros"
        ]
      },
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/": {
      "get": {
        "operationId": "entitlements_list",
        "summary": "Get a list of all entitlements in a repository.",
        "description": "Get a list of all entitlements in a repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying names of entitlements.",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "description": "If true, only include active tokens",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name.",
            "required": false,
            "type": "string",
            "default": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of entitlement tokens",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepositoryToken"
              }
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "post": {
        "operationId": "entitlements_create",
        "summary": "Create a specific entitlement in a repository.",
        "description": "Create a specific entitlement in a repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryTokenRequest"
            }
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created the specified entitlement",
            "schema": {
              "$ref": "#/definitions/RepositoryToken"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/sync/": {
      "post": {
        "operationId": "entitlements_sync",
        "summary": "Synchronise tokens from a source repository.",
        "description": "Synchronise tokens from a source repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryTokenSyncRequest"
            }
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "The tokens have been synchronised from the source repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryTokenSync"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/{identifier}/": {
      "get": {
        "operationId": "entitlements_read",
        "summary": "Get a specific entitlement in a repository.",
        "description": "Get a specific entitlement in a repository.",
        "parameters": [
          {
            "name": "fuzzy",
            "in": "query",
            "description": "If true, entitlement identifiers including name will be fuzzy matched.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the specified entitlement",
            "schema": {
              "$ref": "#/definitions/RepositoryToken"
            }
          },
          "400": {
            "description": "Couldn't retrieve the specified token because the request contains an error.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "patch": {
        "operationId": "entitlements_partial_update",
        "summary": "Update a specific entitlement in a repository.",
        "description": "Update a specific entitlement in a repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryTokenRequestPatch"
            }
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the specified entitlement",
            "schema": {
              "$ref": "#/definitions/RepositoryToken"
            }
          },
          "400": {
            "description": "The entitlement cannot be edited.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "delete": {
        "operationId": "entitlements_delete",
        "summary": "Delete a specific entitlement in a repository.",
        "description": "Delete a specific entitlement in a repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Soft-deleted the specified entitlement token successfully."
          },
          "400": {
            "description": "The entitlement cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/{identifier}/disable/": {
      "post": {
        "operationId": "entitlements_disable",
        "summary": "Disable an entitlement token in a repository.",
        "description": "Disable an entitlement token in a repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The entitlement token has been disabled."
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/{identifier}/enable/": {
      "post": {
        "operationId": "entitlements_enable",
        "summary": "Enable an entitlement token in a repository.",
        "description": "Enable an entitlement token in a repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The entitlement token has been enabled."
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/{identifier}/refresh/": {
      "post": {
        "operationId": "entitlements_refresh",
        "summary": "Refresh an entitlement token in a repository.",
        "description": "Refresh an entitlement token in a repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryTokenRefreshRequest"
            }
          },
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "The entitlement token has been refreshed.",
            "schema": {
              "$ref": "#/definitions/RepositoryTokenRefresh"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/entitlements/{owner}/{repo}/{identifier}/reset/": {
      "post": {
        "operationId": "entitlements_reset",
        "summary": "Reset the statistics for an entitlement token in a repository.",
        "description": "Reset the statistics for an entitlement token in a repository.",
        "parameters": [
          {
            "name": "show_tokens",
            "in": "query",
            "description": "Show entitlement token strings in results",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "204": {
            "description": "The entitlement token statistics have been reset."
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "entitlements"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/files/{owner}/{repo}/": {
      "post": {
        "operationId": "files_create",
        "summary": "Request URL(s) to upload new package file upload(s) to.",
        "description": "Request URL(s) to upload new package file upload(s) to.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageFileUploadRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The upload request was accepted",
            "schema": {
              "$ref": "#/definitions/PackageFileUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "files"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/files/{owner}/{repo}/validate/": {
      "post": {
        "operationId": "files_validate",
        "summary": "Validate parameters used for create.",
        "description": "Validate parameters used for create.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageFileUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "files"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/files/{owner}/{repo}/{identifier}/abort/": {
      "post": {
        "operationId": "files_abort",
        "summary": "Abort a multipart file upload.",
        "description": "Abort a multipart file upload.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageFileUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The multipart upload was aborted successfully."
          },
          "400": {
            "description": "The multipart upload could not be aborted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Namespace (owner), repository or upload file not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "files"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/files/{owner}/{repo}/{identifier}/complete/": {
      "post": {
        "operationId": "files_complete",
        "summary": "Complete a multipart file upload.",
        "description": "Complete a multipart file upload.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageFileUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The multipart upload was completed successfully.",
            "schema": {
              "$ref": "#/definitions/PackageFileUpload"
            }
          },
          "400": {
            "description": "The multipart upload could not be completed.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Namespace (owner), repository or upload file not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "files"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/files/{owner}/{repo}/{identifier}/info/": {
      "get": {
        "operationId": "files_info",
        "summary": "Get upload information to perform a multipart file upload.",
        "description": "Get upload information to perform a multipart file upload.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the file being uploaded",
            "required": true,
            "type": "string"
          },
          {
            "name": "part_number",
            "in": "query",
            "description": "The part number to be uploaded next",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Information for multipart uploaded retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PackageFilePartsUpload"
            }
          },
          "400": {
            "description": "The provided upload file was not a multipart upload.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Namespace (owner), repository or upload file not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "files"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/formats/": {
      "get": {
        "operationId": "formats_list",
        "summary": "Get a list of all supported package formats.",
        "description": "Get a list of all supported package formats.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available package formats retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Format"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "formats"
        ]
      },
      "parameters": []
    },
    "/formats/{slug}/": {
      "get": {
        "operationId": "formats_read",
        "summary": "Get a specific supported package format.",
        "description": "Get a specific supported package format.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Format"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "formats"
        ]
      },
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/metrics/entitlements/{owner}/": {
      "get": {
        "operationId": "metrics_entitlements_account_list",
        "summary": "View for listing entitlement token metrics, across an account.",
        "description": "View for listing entitlement token metrics, across an account.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "finish",
            "in": "query",
            "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tokens",
            "in": "query",
            "description": "A comma seperated list of tokens (slug perm) to include in the results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the metrics for entitlements.",
            "schema": {
              "$ref": "#/definitions/EntitlementUsageMetrics"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "metrics"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/metrics/entitlements/{owner}/{repo}/": {
      "get": {
        "operationId": "metrics_entitlements_repo_list",
        "summary": "View for listing entitlement token metrics, for a repository.",
        "description": "View for listing entitlement token metrics, for a repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "finish",
            "in": "query",
            "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tokens",
            "in": "query",
            "description": "A comma seperated list of tokens (slug perm) to include in the results.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the metrics for entitlements.",
            "schema": {
              "$ref": "#/definitions/EntitlementUsageMetrics"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "metrics"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/metrics/packages/{owner}/{repo}/": {
      "get": {
        "operationId": "metrics_packages_list",
        "summary": "View for listing package usage metrics, for a repository.",
        "description": "View for listing package usage metrics, for a repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "finish",
            "in": "query",
            "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "packages",
            "in": "query",
            "description": "A comma seperated list of packages (slug perm) to include in the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the metrics for packages.",
            "schema": {
              "$ref": "#/definitions/PackageUsageMetrics"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "metrics"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/namespaces/": {
      "get": {
        "operationId": "namespaces_list",
        "summary": "Get a list of all namespaces the user belongs to.",
        "description": "Get a list of all namespaces the user belongs to.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Namespace"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "namespaces"
        ]
      },
      "parameters": []
    },
    "/namespaces/{slug}/": {
      "get": {
        "operationId": "namespaces_read",
        "summary": "Get a specific namespace that the user belongs to.",
        "description": "Get a specific namespace that the user belongs to.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "namespaces"
        ]
      },
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/": {
      "get": {
        "operationId": "orgs_list",
        "summary": "Get a list of all the organizations you are associated with.",
        "description": "Get a list of all the organizations you are associated with.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": []
    },
    "/orgs/{org}/": {
      "get": {
        "operationId": "orgs_read",
        "summary": "Get the details for the specific organization.",
        "description": "Get the details for the specific organization.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_delete",
        "summary": "Delete the specified organization.",
        "description": "Delete the specified organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/deny-policy/": {
      "get": {
        "operationId": "orgs_deny-policy_list",
        "summary": "Get a list of all package deny policies.",
        "description": "Get a list of all package deny policies.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageDenyPolicy"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_deny-policy_create",
        "summary": "Create a package deny policy.",
        "description": "Create a package deny policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/deny-policy/{slug_perm}/": {
      "get": {
        "operationId": "orgs_deny-policy_read",
        "summary": "Get a package deny policy.",
        "description": "Get a package deny policy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "orgs_deny-policy_update",
        "summary": "Update a package deny policy.",
        "description": "Update a package deny policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_deny-policy_partial_update",
        "summary": "Partially update a package deny policy.",
        "description": "Partially update a package deny policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicyRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageDenyPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_deny-policy_delete",
        "summary": "Delete a package deny policy.",
        "description": "Delete a package deny policy.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/invites/": {
      "get": {
        "operationId": "orgs_invites_list",
        "summary": "Get a list of all invites for an organization.",
        "description": "Get a list of all invites for an organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of organization invites",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationInvite"
              }
            }
          },
          "404": {
            "description": "Organization invites not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_invites_create",
        "summary": "Create an organization invite for a specific user",
        "description": "Create an organization invite for a specific user",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationInviteRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invite sent",
            "schema": {
              "$ref": "#/definitions/OrganizationInvite"
            }
          },
          "400": {
            "description": "The invite cannot be created.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/invites/{slug_perm}/": {
      "patch": {
        "operationId": "orgs_invites_partial_update",
        "summary": "Update a specific organization invite.",
        "description": "Update a specific organization invite.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationInviteUpdateRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite updated",
            "schema": {
              "$ref": "#/definitions/OrganizationInvite"
            }
          },
          "400": {
            "description": "The invite cannot be updated.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Invite not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_invites_delete",
        "summary": "Delete a specific organization invite",
        "description": "Delete a specific organization invite",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the organization invite successfully."
          },
          "400": {
            "description": "The organization invite cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/invites/{slug_perm}/extend/": {
      "post": {
        "operationId": "orgs_invites_extend",
        "summary": "Extend an organization invite.",
        "description": "Extend an organization invite.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The invite has been extended",
            "schema": {
              "$ref": "#/definitions/OrganizationInviteExtend"
            }
          },
          "404": {
            "description": "Invite not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/invites/{slug_perm}/resend/": {
      "post": {
        "operationId": "orgs_invites_resend",
        "summary": "Resend an organization invite.",
        "description": "Resend an organization invite.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The invite has been resent",
            "schema": {
              "$ref": "#/definitions/OrganizationInviteExtend"
            }
          },
          "404": {
            "description": "Invite not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/license-policy-violation/": {
      "get": {
        "operationId": "orgs_license-policy-violation_list",
        "summary": "List all current license policy violations for this Organization.",
        "description": "List all current license policy violations for this Organization.",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "The pagination cursor value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "required": [
                "results"
              ],
              "type": "object",
              "properties": {
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PackageLicensePolicyViolationLog"
                  }
                }
              },
              "title": "PackageLicensePolicyViolationLogCursorPage"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/license-policy/": {
      "get": {
        "operationId": "orgs_license-policy_list",
        "summary": "Get a list of all package license policies.",
        "description": "Get a list of all package license policies.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationPackageLicensePolicy"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_license-policy_create",
        "summary": "Create a package license policy.",
        "description": "Create a package license policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/license-policy/{policy_slug_perm}/evaluation/": {
      "get": {
        "operationId": "orgs_license-policy_evaluation_list",
        "summary": "List evaluation requests for this policy.",
        "description": "List evaluation requests for this policy.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_license-policy_evaluation_create",
        "summary": "Create an evaluation request for this policy.",
        "description": "Create an evaluation request for this policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageLicensePolicyEvaluationRequestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "policy_slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/license-policy/{policy_slug_perm}/evaluation/{slug_perm}/": {
      "get": {
        "operationId": "orgs_license-policy_evaluation_read",
        "summary": "Retrieve an evaluation request for this policy.",
        "description": "Retrieve an evaluation request for this policy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "policy_slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/license-policy/{slug_perm}/": {
      "get": {
        "operationId": "orgs_license-policy_read",
        "summary": "Get a package license policy.",
        "description": "Get a package license policy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "orgs_license-policy_update",
        "summary": "Update a package license policy.",
        "description": "Update a package license policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_license-policy_partial_update",
        "summary": "Partially update a package license policy.",
        "description": "Partially update a package license policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicyRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageLicensePolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_license-policy_delete",
        "summary": "Delete a package license policy.",
        "description": "Delete a package license policy.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/": {
      "get": {
        "operationId": "orgs_members_list",
        "summary": "Get the details for all organization members.",
        "description": "Get the details for all organization members.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter for active/inactive users.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying of members within an Organization.Available options are: email, org, user, userslug, inactive, user_name, role",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-user_name`). Available options: user_name, role.",
            "required": false,
            "type": "string",
            "default": "user_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of organization's members",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationMembership"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/{member}/": {
      "get": {
        "operationId": "orgs_members_read",
        "summary": "Get the details for a specific organization member.",
        "description": "Get the details for a specific organization member.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationMembership"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_members_partial_update",
        "summary": "Views for working with organization members.",
        "description": "Views for working with organization members.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationMembershipRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationMembership"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_members_delete",
        "summary": "Removes a member from the organization.",
        "description": "Removes a member from the organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Removed the organization member successfully."
          },
          "400": {
            "description": "The organization member cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "member",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/{member}/refresh/": {
      "post": {
        "operationId": "orgs_members_refresh",
        "summary": "Refresh a member of the organization's API key.",
        "description": "Refresh a member of the organization's API key.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Org member API key has been refreshed."
          },
          "400": {
            "description": "The org member's API key cannot be refreshed.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Org member not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "member",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/{member}/remove/": {
      "get": {
        "operationId": "orgs_members_remove",
        "summary": "Removes a member from the organization (deprecated, use DELETE instead).",
        "description": "Removes a member from the organization (deprecated, use DELETE instead).",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Removed the organization member successfully."
          },
          "400": {
            "description": "The organization member cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "member",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/{member}/update-role/": {
      "patch": {
        "operationId": "orgs_members_update_role",
        "summary": "Update a member's role in the organization.",
        "description": "Update a member's role in the organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationMembershipRoleUpdateRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationMembershipRoleUpdate"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "member",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/members/{member}/update-visibility/": {
      "patch": {
        "operationId": "orgs_members_update_visibility",
        "summary": "Update a member's visibility in the organization.",
        "description": "Update a member's visibility in the organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationMembershipVisibilityUpdateRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationMembershipVisibilityUpdate"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "member",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/openid-connect/": {
      "get": {
        "operationId": "orgs_openid-connect_list",
        "summary": "Retrieve the list of OpenID Connect provider settings for the org.",
        "description": "Retrieve the list of OpenID Connect provider settings for the org.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying of OpenID Connect (OIDC) provider settings.Available options are: name, provider_url, service_account",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name.",
            "required": false,
            "type": "string",
            "default": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of OpenID Connect provider settings for the org",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProviderSettings"
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_openid-connect_create",
        "summary": "Create the OpenID Connect provider settings for the org.",
        "description": "Create the OpenID Connect provider settings for the org.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWriteRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created the OpenID Connect provider settings for the org",
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWrite"
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/openid-connect/{provider_setting}/dynamic-mappings/": {
      "get": {
        "operationId": "orgs_openid-connect_dynamic-mappings_list",
        "summary": "Retrieve the list of OpenID Connect dynamic mappings for the provider setting.",
        "description": "Retrieve the list of OpenID Connect dynamic mappings for the provider setting.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of OpenID Connect dynamic mappings for the selected provider setting",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DynamicMapping"
              }
            }
          },
          "404": {
            "description": "Organization or Provider Setting not found (see detail)",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "provider_setting",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/openid-connect/{provider_setting}/dynamic-mappings/{claim_value}/": {
      "get": {
        "operationId": "orgs_openid-connect_dynamic-mappings_read",
        "summary": "Retrieve a specific OpenID Connect dynamic mapping for the provider setting.",
        "description": "Retrieve a specific OpenID Connect dynamic mapping for the provider setting.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the specified OpenID Connect dynamic mapping",
            "schema": {
              "$ref": "#/definitions/DynamicMapping"
            }
          },
          "404": {
            "description": "Organization, Provider Setting or Dynamic Mapping with claim not found (see detail)",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "provider_setting",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "claim_value",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/openid-connect/{slug_perm}/": {
      "get": {
        "operationId": "orgs_openid-connect_read",
        "summary": "Retrieve a specific OpenID Connect provider setting for the org.",
        "description": "Retrieve a specific OpenID Connect provider setting for the org.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProviderSettings"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "orgs_openid-connect_update",
        "summary": "Update a specific OpenID Connect provider setting for the org.",
        "description": "Update a specific OpenID Connect provider setting for the org.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWriteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the specified OpenID Connect provider setting for the org",
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWrite"
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_openid-connect_partial_update",
        "summary": "Update a specific OpenID Connect provider setting for the org.",
        "description": "Update a specific OpenID Connect provider setting for the org.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWriteRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the specified OpenID Connect provider setting for the org",
            "schema": {
              "$ref": "#/definitions/ProviderSettingsWrite"
            }
          },
          "404": {
            "description": "Organization not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_openid-connect_delete",
        "summary": "Delete a specific OpenID Connect provider setting for the org.",
        "description": "Delete a specific OpenID Connect provider setting for the org.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the specified OpenID Connect provider setting successfully."
          },
          "400": {
            "description": "The specified OpenID Connect provider setting cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-authentication": {
      "get": {
        "operationId": "orgs_saml-authentication_read",
        "summary": "Retrieve the SAML Authentication settings for this Organization.",
        "description": "Retrieve the SAML Authentication settings for this Organization.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the SAML Authentication settings.",
            "schema": {
              "$ref": "#/definitions/OrganizationSAMLAuth"
            }
          },
          "402": {
            "description": "SAML Authentication is not available; please upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Organization not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_saml-authentication_partial_update",
        "summary": "Update the SAML Authentication settings for this Organization.",
        "description": "Update the SAML Authentication settings for this Organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationSAMLAuthRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the SAML Authentication settings.",
            "schema": {
              "$ref": "#/definitions/OrganizationSAMLAuth"
            }
          },
          "402": {
            "description": "SAML Authentication is not available; please upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Organization not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-group-sync/": {
      "get": {
        "operationId": "orgs_saml-group-sync_list",
        "summary": "Get the details of all SAML Group Sync mapping within an organization.",
        "description": "Get the details of all SAML Group Sync mapping within an organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of all SAML Group Sync mappings for this org",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationGroupSync"
              }
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_saml-group-sync_create",
        "summary": "Create a new SAML Group Sync mapping within an organization.",
        "description": "Create a new SAML Group Sync mapping within an organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationGroupSyncRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The SAML Group Sync mapping was created.",
            "schema": {
              "$ref": "#/definitions/OrganizationGroupSync"
            }
          },
          "404": {
            "description": "Org namespace not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-group-sync/disable/": {
      "post": {
        "operationId": "orgs_saml-group-sync_disable",
        "summary": "Disable SAML Group Sync for this organization.",
        "description": "Disable SAML Group Sync for this organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "SAML Group Sync has been disabled for this organization."
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-group-sync/enable/": {
      "post": {
        "operationId": "orgs_saml-group-sync_enable",
        "summary": "Enable SAML Group Sync for this organization.",
        "description": "Enable SAML Group Sync for this organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "SAML Group Sync has been enabled for this organization."
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-group-sync/status/": {
      "get": {
        "operationId": "orgs_saml-group-sync_status",
        "summary": "Retrieve the SAML Group Sync status for this organization.",
        "description": "Retrieve the SAML Group Sync status for this organization.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the SAML Group Sync status for this organization.",
            "schema": {
              "$ref": "#/definitions/OrganizationGroupSyncStatus"
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/saml-group-sync/{slug_perm}/": {
      "delete": {
        "operationId": "orgs_saml-group-sync_delete",
        "summary": "Delete a SAML Group Sync mapping from an organization.",
        "description": "Delete a SAML Group Sync mapping from an organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Mapping removed successfully"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/services/": {
      "get": {
        "operationId": "orgs_services_list",
        "summary": "Get a list of all services within an organization.",
        "description": "Get a list of all services within an organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying of services within an Organization.Available options are: name, role",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-created_at`). Available options: created_at, name, role.",
            "required": false,
            "type": "string",
            "default": "created_at"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of services within the org",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Service"
              }
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_services_create",
        "summary": "Create a service within an organization.",
        "description": "Create a service within an organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created the service within the org",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/services/{service}/": {
      "get": {
        "operationId": "orgs_services_read",
        "summary": "Retrieve details of a single service within an organization.",
        "description": "Retrieve details of a single service within an organization.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_services_partial_update",
        "summary": "Update a service within an organization.",
        "description": "Update a service within an organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ServiceRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the service within the org",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_services_delete",
        "summary": "Delete a specific service",
        "description": "Delete a specific service",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the service successfully."
          },
          "400": {
            "description": "The service cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "service",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/services/{service}/refresh/": {
      "post": {
        "operationId": "orgs_services_refresh",
        "summary": "Refresh service API token.",
        "description": "Refresh service API token.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Refreshed the service token successfully.",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "The service token cannot be refreshed.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "service",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/teams/": {
      "get": {
        "operationId": "orgs_teams_list",
        "summary": "Get the details of all teams within an organization.",
        "description": "Get the details of all teams within an organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "for_user",
            "in": "query",
            "description": "Filter for teams that you are a member of.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying of teams within an Organization.Available options are: name, slug, user, userslug",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name, members.",
            "required": false,
            "type": "string",
            "default": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of teams within the org",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationTeam"
              }
            }
          },
          "404": {
            "description": "Org namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_teams_create",
        "summary": "Create a team for this organization.",
        "description": "Create a team for this organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationTeamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team created",
            "schema": {
              "$ref": "#/definitions/OrganizationTeam"
            }
          },
          "400": {
            "description": "The team cannot be created.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/teams/{team}/": {
      "get": {
        "operationId": "orgs_teams_read",
        "summary": "Get the details of a specific team within an organization.",
        "description": "Get the details of a specific team within an organization.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the details of the requested team.",
            "schema": {
              "$ref": "#/definitions/OrganizationTeam"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_teams_partial_update",
        "summary": "Update a specific team in a organization.",
        "description": "Update a specific team in a organization.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationTeamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the specified team.",
            "schema": {
              "$ref": "#/definitions/OrganizationTeam"
            }
          },
          "400": {
            "description": "The team cannot be edited.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_teams_delete",
        "summary": "Delete a specific team in a organization.",
        "description": "Delete a specific team in a organization.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the team successfully."
          },
          "400": {
            "description": "The team cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "team",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/teams/{team}/members": {
      "get": {
        "operationId": "orgs_teams_members_list",
        "summary": "List all members for the team.",
        "description": "List all members for the team.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved users for the specified team.",
            "schema": {
              "$ref": "#/definitions/OrganizationTeamMembers"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_teams_members_create",
        "summary": "Add users to a team.",
        "description": "Add users to a team.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationTeamMembers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The users were added to the team.",
            "schema": {
              "$ref": "#/definitions/OrganizationTeamMembers"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "orgs_teams_members_update",
        "summary": "Replace all team members.",
        "description": "Replace all team members.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationTeamMembers"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The team members were replaced.",
            "schema": {
              "$ref": "#/definitions/OrganizationTeamMembers"
            }
          },
          "404": {
            "description": "Team not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "team",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/vulnerability-policy-violation/": {
      "get": {
        "operationId": "orgs_vulnerability-policy-violation_list",
        "summary": "List all current vulnerability policy violations for this Organization.",
        "description": "List all current vulnerability policy violations for this Organization.",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "The pagination cursor value.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "required": [
                "results"
              ],
              "type": "object",
              "properties": {
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PackageVulnerabilityPolicyViolationLog"
                  }
                }
              },
              "title": "PackageVulnerabilityPolicyViolationLogCursorPage"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/vulnerability-policy/": {
      "get": {
        "operationId": "orgs_vulnerability-policy_list",
        "summary": "Get a list of all package vulnerability policies.",
        "description": "Get a list of all package vulnerability policies.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_vulnerability-policy_create",
        "summary": "Create a package vulnerability policy.",
        "description": "Create a package vulnerability policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/vulnerability-policy/{policy_slug_perm}/evaluation/": {
      "get": {
        "operationId": "orgs_vulnerability-policy_evaluation_list",
        "summary": "List evaluation requests for this policy.",
        "description": "List evaluation requests for this policy.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "post": {
        "operationId": "orgs_vulnerability-policy_evaluation_create",
        "summary": "Create an evaluation request for this policy.",
        "description": "Create an evaluation request for this policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequestRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "policy_slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/vulnerability-policy/{policy_slug_perm}/evaluation/{slug_perm}/": {
      "get": {
        "operationId": "orgs_vulnerability-policy_evaluation_read",
        "summary": "Retrieve an evaluation request for this policy.",
        "description": "Retrieve an evaluation request for this policy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "policy_slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/orgs/{org}/vulnerability-policy/{slug_perm}/": {
      "get": {
        "operationId": "orgs_vulnerability-policy_read",
        "summary": "Get a package vulnerability policy.",
        "description": "Get a package vulnerability policy.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "put": {
        "operationId": "orgs_vulnerability-policy_update",
        "summary": "Update a package vulnerability policy.",
        "description": "Update a package vulnerability policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "patch": {
        "operationId": "orgs_vulnerability-policy_partial_update",
        "summary": "Partially update a package vulnerability policy.",
        "description": "Partially update a package vulnerability policy.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "delete": {
        "operationId": "orgs_vulnerability-policy_delete",
        "summary": "Delete a package vulnerability policy.",
        "description": "Delete a package vulnerability policy.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "orgs"
        ]
      },
      "parameters": [
        {
          "name": "org",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/": {
      "get": {
        "operationId": "packages_list",
        "summary": "Get a list of all packages associated with repository.",
        "description": "Get a list of all packages associated with repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order.",
            "required": false,
            "type": "string",
            "default": "-date"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of packages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Package"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/groups/": {
      "get": {
        "operationId": "packages_groups_list",
        "summary": "Return a list of Package Groups in a repository.",
        "description": "Return a list of Package Groups in a repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "group_by",
            "in": "query",
            "description": "A field to group packages by. Available options: name, backend_kind.",
            "required": false,
            "type": "string",
            "default": "name"
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term for querying names, filenames, versions, distributions, architectures, formats, or statuses of packages.",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name, count, num_downloads, size, last_push, backend_kind.",
            "required": false,
            "type": "string",
            "default": "name"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of package groups.",
            "schema": {
              "required": [
                "results"
              ],
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PackageGroup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/alpine/": {
      "post": {
        "operationId": "packages_upload_alpine",
        "summary": "Create a new Alpine package",
        "description": "Create a new Alpine package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AlpinePackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/AlpinePackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/cargo/": {
      "post": {
        "operationId": "packages_upload_cargo",
        "summary": "Create a new Cargo package",
        "description": "Create a new Cargo package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CargoPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/CargoPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/cocoapods/": {
      "post": {
        "operationId": "packages_upload_cocoapods",
        "summary": "Create a new CocoaPods package",
        "description": "Create a new CocoaPods package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CocoapodsPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/CocoapodsPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/composer/": {
      "post": {
        "operationId": "packages_upload_composer",
        "summary": "Create a new Composer package",
        "description": "Create a new Composer package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComposerPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/ComposerPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/conan/": {
      "post": {
        "operationId": "packages_upload_conan",
        "summary": "Create a new Conan package",
        "description": "Create a new Conan package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConanPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/ConanPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/conda/": {
      "post": {
        "operationId": "packages_upload_conda",
        "summary": "Create a new Conda package",
        "description": "Create a new Conda package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CondaPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/CondaPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/cran/": {
      "post": {
        "operationId": "packages_upload_cran",
        "summary": "Create a new CRAN package",
        "description": "Create a new CRAN package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CranPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/CranPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/dart/": {
      "post": {
        "operationId": "packages_upload_dart",
        "summary": "Create a new Dart package",
        "description": "Create a new Dart package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DartPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/DartPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/deb/": {
      "post": {
        "operationId": "packages_upload_deb",
        "summary": "Create a new Debian package",
        "description": "Create a new Debian package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/DebPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/docker/": {
      "post": {
        "operationId": "packages_upload_docker",
        "summary": "Create a new Docker package",
        "description": "Create a new Docker package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/DockerPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/go/": {
      "post": {
        "operationId": "packages_upload_go",
        "summary": "Create a new Go package",
        "description": "Create a new Go package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/GoPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/helm/": {
      "post": {
        "operationId": "packages_upload_helm",
        "summary": "Create a new Helm package",
        "description": "Create a new Helm package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HelmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/HelmPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/hex/": {
      "post": {
        "operationId": "packages_upload_hex",
        "summary": "Create a new Hex package",
        "description": "Create a new Hex package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HexPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/HexPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/huggingface/": {
      "post": {
        "operationId": "packages_upload_huggingface",
        "summary": "Create a new Hugging Face package",
        "description": "Create a new Hugging Face package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HuggingfacePackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/HuggingfacePackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/luarocks/": {
      "post": {
        "operationId": "packages_upload_luarocks",
        "summary": "Create a new LuaRocks package",
        "description": "Create a new LuaRocks package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LuarocksPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/LuarocksPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/maven/": {
      "post": {
        "operationId": "packages_upload_maven",
        "summary": "Create a new Maven package",
        "description": "Create a new Maven package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MavenPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/MavenPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/npm/": {
      "post": {
        "operationId": "packages_upload_npm",
        "summary": "Create a new npm package",
        "description": "Create a new npm package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NpmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/NpmPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/nuget/": {
      "post": {
        "operationId": "packages_upload_nuget",
        "summary": "Create a new NuGet package",
        "description": "Create a new NuGet package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NugetPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/NugetPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/p2/": {
      "post": {
        "operationId": "packages_upload_p2",
        "summary": "Create a new P2 package",
        "description": "Create a new P2 package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/P2PackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/P2PackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/python/": {
      "post": {
        "operationId": "packages_upload_python",
        "summary": "Create a new Python package",
        "description": "Create a new Python package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PythonPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/PythonPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/raw/": {
      "post": {
        "operationId": "packages_upload_raw",
        "summary": "Create a new Raw package",
        "description": "Create a new Raw package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RawPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/RawPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/rpm/": {
      "post": {
        "operationId": "packages_upload_rpm",
        "summary": "Create a new RedHat package",
        "description": "Create a new RedHat package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RpmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/RpmPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/ruby/": {
      "post": {
        "operationId": "packages_upload_ruby",
        "summary": "Create a new Ruby package",
        "description": "Create a new Ruby package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RubyPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/RubyPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/swift/": {
      "post": {
        "operationId": "packages_upload_swift",
        "summary": "Create a new Swift package",
        "description": "Create a new Swift package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SwiftPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/SwiftPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/terraform/": {
      "post": {
        "operationId": "packages_upload_terraform",
        "summary": "Create a new Terraform package",
        "description": "Create a new Terraform package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TerraformPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/TerraformPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/upload/vagrant/": {
      "post": {
        "operationId": "packages_upload_vagrant",
        "summary": "Create a new Vagrant package",
        "description": "Create a new Vagrant package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VagrantPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Upload acknowledged and queued for synchronization.",
            "schema": {
              "$ref": "#/definitions/VagrantPackageUpload"
            }
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/alpine/": {
      "post": {
        "operationId": "packages_validate-upload_alpine",
        "summary": "Validate parameters for create Alpine package",
        "description": "Validate parameters for create Alpine package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AlpinePackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/cargo/": {
      "post": {
        "operationId": "packages_validate-upload_cargo",
        "summary": "Validate parameters for create Cargo package",
        "description": "Validate parameters for create Cargo package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CargoPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/cocoapods/": {
      "post": {
        "operationId": "packages_validate-upload_cocoapods",
        "summary": "Validate parameters for create CocoaPods package",
        "description": "Validate parameters for create CocoaPods package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CocoapodsPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/composer/": {
      "post": {
        "operationId": "packages_validate-upload_composer",
        "summary": "Validate parameters for create Composer package",
        "description": "Validate parameters for create Composer package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComposerPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/conan/": {
      "post": {
        "operationId": "packages_validate-upload_conan",
        "summary": "Validate parameters for create Conan package",
        "description": "Validate parameters for create Conan package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConanPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/conda/": {
      "post": {
        "operationId": "packages_validate-upload_conda",
        "summary": "Validate parameters for create Conda package",
        "description": "Validate parameters for create Conda package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CondaPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/cran/": {
      "post": {
        "operationId": "packages_validate-upload_cran",
        "summary": "Validate parameters for create CRAN package",
        "description": "Validate parameters for create CRAN package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CranPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/dart/": {
      "post": {
        "operationId": "packages_validate-upload_dart",
        "summary": "Validate parameters for create Dart package",
        "description": "Validate parameters for create Dart package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DartPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/deb/": {
      "post": {
        "operationId": "packages_validate-upload_deb",
        "summary": "Validate parameters for create Debian package",
        "description": "Validate parameters for create Debian package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/docker/": {
      "post": {
        "operationId": "packages_validate-upload_docker",
        "summary": "Validate parameters for create Docker package",
        "description": "Validate parameters for create Docker package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/go/": {
      "post": {
        "operationId": "packages_validate-upload_go",
        "summary": "Validate parameters for create Go package",
        "description": "Validate parameters for create Go package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/helm/": {
      "post": {
        "operationId": "packages_validate-upload_helm",
        "summary": "Validate parameters for create Helm package",
        "description": "Validate parameters for create Helm package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HelmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/hex/": {
      "post": {
        "operationId": "packages_validate-upload_hex",
        "summary": "Validate parameters for create Hex package",
        "description": "Validate parameters for create Hex package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HexPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/huggingface/": {
      "post": {
        "operationId": "packages_validate-upload_huggingface",
        "summary": "Validate parameters for create Hugging Face package",
        "description": "Validate parameters for create Hugging Face package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HuggingfacePackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/luarocks/": {
      "post": {
        "operationId": "packages_validate-upload_luarocks",
        "summary": "Validate parameters for create LuaRocks package",
        "description": "Validate parameters for create LuaRocks package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LuarocksPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/maven/": {
      "post": {
        "operationId": "packages_validate-upload_maven",
        "summary": "Validate parameters for create Maven package",
        "description": "Validate parameters for create Maven package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MavenPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/npm/": {
      "post": {
        "operationId": "packages_validate-upload_npm",
        "summary": "Validate parameters for create npm package",
        "description": "Validate parameters for create npm package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NpmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/nuget/": {
      "post": {
        "operationId": "packages_validate-upload_nuget",
        "summary": "Validate parameters for create NuGet package",
        "description": "Validate parameters for create NuGet package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NugetPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/p2/": {
      "post": {
        "operationId": "packages_validate-upload_p2",
        "summary": "Validate parameters for create P2 package",
        "description": "Validate parameters for create P2 package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/P2PackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/python/": {
      "post": {
        "operationId": "packages_validate-upload_python",
        "summary": "Validate parameters for create Python package",
        "description": "Validate parameters for create Python package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PythonPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/raw/": {
      "post": {
        "operationId": "packages_validate-upload_raw",
        "summary": "Validate parameters for create Raw package",
        "description": "Validate parameters for create Raw package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RawPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/rpm/": {
      "post": {
        "operationId": "packages_validate-upload_rpm",
        "summary": "Validate parameters for create RedHat package",
        "description": "Validate parameters for create RedHat package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RpmPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/ruby/": {
      "post": {
        "operationId": "packages_validate-upload_ruby",
        "summary": "Validate parameters for create Ruby package",
        "description": "Validate parameters for create Ruby package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RubyPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/swift/": {
      "post": {
        "operationId": "packages_validate-upload_swift",
        "summary": "Validate parameters for create Swift package",
        "description": "Validate parameters for create Swift package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SwiftPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/terraform/": {
      "post": {
        "operationId": "packages_validate-upload_terraform",
        "summary": "Validate parameters for create Terraform package",
        "description": "Validate parameters for create Terraform package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TerraformPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/validate-upload/vagrant/": {
      "post": {
        "operationId": "packages_validate-upload_vagrant",
        "summary": "Validate parameters for create Vagrant package",
        "description": "Validate parameters for create Vagrant package",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VagrantPackageUploadRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Validation was successful, parameters are OK."
          },
          "404": {
            "description": "Namespace (owner) or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/": {
      "get": {
        "operationId": "packages_read",
        "summary": "Get a specific package in a repository.",
        "description": "Get a specific package in a repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the specified package successfully.",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "delete": {
        "operationId": "packages_delete",
        "summary": "Delete a specific package in a repository.",
        "description": "Delete a specific package in a repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the specified package successfully."
          },
          "400": {
            "description": "The package cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/copy/": {
      "post": {
        "operationId": "packages_copy",
        "summary": "Copy a package to another repository.",
        "description": "Copy a package to another repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageCopyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Copied specified package to destination repository.",
            "schema": {
              "$ref": "#/definitions/PackageCopy"
            }
          },
          "400": {
            "description": "The package is in the wrong state for the requested operation.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/dependencies/": {
      "get": {
        "operationId": "packages_dependencies",
        "summary": "Get the list of dependencies for a package. Transitive dependencies are included where supported.",
        "description": "Get the list of dependencies for a package. Transitive dependencies are included where supported.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved stored dependencies for specified package.",
            "schema": {
              "$ref": "#/definitions/PackageDependencies"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/move/": {
      "post": {
        "operationId": "packages_move",
        "summary": "Move a package to another repository.",
        "description": "Move a package to another repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageMoveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moved specified package to destination repository.",
            "schema": {
              "$ref": "#/definitions/PackageMove"
            }
          },
          "400": {
            "description": "The package is in the wrong state for the requested operation.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/quarantine/": {
      "post": {
        "operationId": "packages_quarantine",
        "summary": "Quarantine or release a package.",
        "description": "Quarantine or release a package.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageQuarantineRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changed the package's quarantine status.",
            "schema": {
              "$ref": "#/definitions/PackageQuarantine"
            }
          },
          "400": {
            "description": "The package is in the wrong state for the requested operation.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/resync/": {
      "post": {
        "operationId": "packages_resync",
        "summary": "Schedule a package for resynchronisation.",
        "description": "Schedule a package for resynchronisation.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Scheduled the package for resynchronisation.",
            "schema": {
              "$ref": "#/definitions/PackageResync"
            }
          },
          "400": {
            "description": "The package is in the wrong state for the requested operation.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/scan/": {
      "post": {
        "operationId": "packages_scan",
        "summary": "Schedule a package for scanning.",
        "description": "Schedule a package for scanning.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Scheduled the package for scanning.",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/status/": {
      "get": {
        "operationId": "packages_status",
        "summary": "Get the synchronization status for a package.",
        "description": "Get the synchronization status for a package.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved status for specified package.",
            "schema": {
              "$ref": "#/definitions/PackageStatus"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/packages/{owner}/{repo}/{identifier}/tag/": {
      "post": {
        "operationId": "packages_tag",
        "summary": "Add/Replace/Remove tags for a package.",
        "description": "Add/Replace/Remove tags for a package.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PackageTagRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Modified tags for the package.",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "packages"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/quota/history/{owner}/": {
      "get": {
        "operationId": "quota_history_read",
        "summary": "Quota history for a given namespace.",
        "description": "Quota history for a given namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuotaHistory"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "quota"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/quota/oss/history/{owner}/": {
      "get": {
        "operationId": "quota_oss_history_read",
        "summary": "Open-source Quota history for a given namespace.",
        "description": "Open-source Quota history for a given namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuotaHistory"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "quota"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/quota/oss/{owner}/": {
      "get": {
        "operationId": "quota_oss_read",
        "summary": "Open-source Quota usage for a given namespace.",
        "description": "Open-source Quota usage for a given namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Quota"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "quota"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/quota/{owner}/": {
      "get": {
        "operationId": "quota_read",
        "summary": "Quota usage for a given namespace.",
        "description": "Quota usage for a given namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Quota"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "quota"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/rates/limits/": {
      "get": {
        "operationId": "rates_limits_list",
        "summary": "Endpoint to check rate limits for current user.",
        "description": "Endpoint to check rate limits for current user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rate check was successful",
            "schema": {
              "$ref": "#/definitions/ResourcesRateCheck"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "rates"
        ]
      },
      "parameters": []
    },
    "/repos/": {
      "get": {
        "operationId": "repos_user_list",
        "summary": "Get a list of all repositories associated with current user.",
        "description": "Get a list of all repositories associated with current user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of repositories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": []
    },
    "/repos/{owner}/": {
      "get": {
        "operationId": "repos_namespace_list",
        "summary": "Get a list of all repositories within a namespace.",
        "description": "Get a list of all repositories within a namespace.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of repositories",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            }
          },
          "404": {
            "description": "Owner namespace not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_create",
        "summary": "Create a new repository in a given namespace.",
        "description": "Create a new repository in a given namespace.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The repository was created.",
            "schema": {
              "$ref": "#/definitions/RepositoryCreate"
            }
          },
          "404": {
            "description": "Owner namespace not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/": {
      "get": {
        "operationId": "repos_read",
        "summary": "Get a specific repository.",
        "description": "Get a specific repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the specified repository",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_partial_update",
        "summary": "Update details about a repository in a given namespace.",
        "description": "Update details about a repository in a given namespace.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository was updated.",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "404": {
            "description": "Unable to find repository with that name in the provided namespace.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_delete",
        "summary": "Delete a repository in a given namespace.",
        "description": "Delete a repository in a given namespace.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The repository has been scheduled for deletion."
          },
          "404": {
            "description": "Unable to find repository with that name in the provided namespace.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/ecdsa/": {
      "get": {
        "operationId": "repos_ecdsa_list",
        "summary": "Retrieve the active ECDSA key for the Repository.",
        "description": "Retrieve the active ECDSA key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the active ECDSA key.",
            "schema": {
              "$ref": "#/definitions/RepositoryEcdsaKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_ecdsa_create",
        "summary": "Set the active ECDSA key for the Repository.",
        "description": "Set the active ECDSA key for the Repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryEcdsaKeyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided ECDSA key is the same as the current ECDSA key.",
            "schema": {
              "$ref": "#/definitions/RepositoryEcdsaKey"
            }
          },
          "201": {
            "description": "The provided ECDSA key was assigned to the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryEcdsaKey"
            }
          },
          "400": {
            "description": "The provided ECDSA key is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "402": {
            "description": "Custom ECDSA keys are not active; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Organization/Repository does not exist, or you do not have permissions.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/ecdsa/regenerate/": {
      "post": {
        "operationId": "repos_ecdsa_regenerate",
        "summary": "Regenerate ECDSA Key for the Repository.",
        "description": "Regenerate ECDSA Key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An ECDSA key was generated for the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryEcdsaKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/geoip": {
      "get": {
        "operationId": "repos_geoip_read",
        "summary": "List all repository geoip rules.",
        "description": "List all repository geoip rules.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpRules"
            }
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_geoip_update",
        "summary": "Replace repository geoip rules.",
        "description": "Replace repository geoip rules.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpRulesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpRules"
            }
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_geoip_partial_update",
        "summary": "Partially update repository geoip rules.",
        "description": "Partially update repository geoip rules.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpRulesRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpRules"
            }
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/geoip/disable/": {
      "post": {
        "operationId": "repos_geoip_disable",
        "summary": "Disable GeoIP for this repository.",
        "description": "Disable GeoIP for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RespositoryGeoIpEnableDisableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GeoIP has been disabled for this repository."
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/geoip/enable/": {
      "post": {
        "operationId": "repos_geoip_enable",
        "summary": "Enable GeoIP for this repository.",
        "description": "Enable GeoIP for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RespositoryGeoIpEnableDisableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GeoIP has been enabled for this repository."
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/geoip/status/": {
      "get": {
        "operationId": "api_repos_geoip_status",
        "summary": "Retrieve the GeoIP status for this repository.",
        "description": "Retrieve the GeoIP status for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the GeoIP status for this repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpStatus"
            }
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/geoip/test/": {
      "post": {
        "operationId": "repos_geoip_test",
        "summary": "Test a list of IP addresses against the repository's current GeoIP rules.",
        "description": "Test a list of IP addresses against the repository's current GeoIP rules.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpTestAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfuly tested addresses against the repository's GeoIP rules",
            "schema": {
              "$ref": "#/definitions/RepositoryGeoIpTestAddressResponse"
            }
          },
          "402": {
            "description": "Geo/IP restrictions are not available; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/gpg/": {
      "get": {
        "operationId": "repos_gpg_list",
        "summary": "Retrieve the active GPG key for the Repository.",
        "description": "Retrieve the active GPG key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the active GPG key.",
            "schema": {
              "$ref": "#/definitions/RepositoryGpgKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_gpg_create",
        "summary": "Set the active GPG key for the Repository.",
        "description": "Set the active GPG key for the Repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryGpgKeyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided GPG key is the same as the current GPG key.",
            "schema": {
              "$ref": "#/definitions/RepositoryGpgKey"
            }
          },
          "201": {
            "description": "The provided GPG key was assigned to the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryGpgKey"
            }
          },
          "400": {
            "description": "The provided GPG key is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "402": {
            "description": "Custom GPG keys are not active; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Organization/Repository does not exist, or you do not have permissions.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/gpg/regenerate/": {
      "post": {
        "operationId": "repos_gpg_regenerate",
        "summary": "Regenerate GPG Key for the Repository.",
        "description": "Regenerate GPG Key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A GPG key was generated for the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryGpgKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/privileges": {
      "get": {
        "operationId": "repos_privileges_list",
        "summary": "List all explicity created privileges for the repository.",
        "description": "List all explicity created privileges for the repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved privileges for the specified repository",
            "schema": {
              "$ref": "#/definitions/RepositoryPrivilegeInput"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_privileges_update",
        "summary": "Replace all existing repository privileges with those specified.",
        "description": "Replace all existing repository privileges with those specified.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryPrivilegeInputRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Repository privileges replaced"
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_privileges_partial_update",
        "summary": "Modify privileges for the repository.",
        "description": "Modify privileges for the repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryPrivilegeInputRequestPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Repository privileges updated"
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/rsa/": {
      "get": {
        "operationId": "repos_rsa_list",
        "summary": "Retrieve the active RSA key for the Repository.",
        "description": "Retrieve the active RSA key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the active RSA key.",
            "schema": {
              "$ref": "#/definitions/RepositoryRsaKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_rsa_create",
        "summary": "Set the active RSA key for the Repository.",
        "description": "Set the active RSA key for the Repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryRsaKeyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The provided RSA key is the same as the current RSA key.",
            "schema": {
              "$ref": "#/definitions/RepositoryRsaKey"
            }
          },
          "201": {
            "description": "The provided RSA key was assigned to the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryRsaKey"
            }
          },
          "400": {
            "description": "The provided RSA key is not valid",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "402": {
            "description": "Custom RSA keys are not active; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "404": {
            "description": "Organization/Repository does not exist, or you do not have permissions.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/rsa/regenerate/": {
      "post": {
        "operationId": "repos_rsa_regenerate",
        "summary": "Regenerate RSA Key for the Repository.",
        "description": "Regenerate RSA Key for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An RSA key was generated for the Repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryRsaKey"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/cargo/": {
      "get": {
        "operationId": "repos_upstream_cargo_list",
        "summary": "List Cargo upstream configs for this repository.",
        "description": "List Cargo upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CargoUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_cargo_create",
        "summary": "Create a Cargo upstream config for this repository.",
        "description": "Create a Cargo upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CargoUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CargoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/cargo/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_cargo_read",
        "summary": "Retrieve a Cargo upstream config for this repository.",
        "description": "Retrieve a Cargo upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CargoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_cargo_update",
        "summary": "Update a Cargo upstream config for this repository.",
        "description": "Update a Cargo upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CargoUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CargoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_cargo_partial_update",
        "summary": "Partially update a Cargo upstream config for this repository.",
        "description": "Partially update a Cargo upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CargoUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CargoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_cargo_delete",
        "summary": "Delete a Cargo upstream config for this repository.",
        "description": "Delete a Cargo upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/composer/": {
      "get": {
        "operationId": "repos_upstream_composer_list",
        "summary": "List Composer upstream configs for this repository.",
        "description": "List Composer upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComposerUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_composer_create",
        "summary": "Create a Composer upstream config for this repository.",
        "description": "Create a Composer upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComposerUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ComposerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/composer/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_composer_read",
        "summary": "Retrieve a Composer upstream config for this repository.",
        "description": "Retrieve a Composer upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComposerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_composer_update",
        "summary": "Update a Composer upstream config for this repository.",
        "description": "Update a Composer upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComposerUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComposerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_composer_partial_update",
        "summary": "Partially update a Composer upstream config for this repository.",
        "description": "Partially update a Composer upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ComposerUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComposerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_composer_delete",
        "summary": "Delete a Composer upstream config for this repository.",
        "description": "Delete a Composer upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/conda/": {
      "get": {
        "operationId": "repos_upstream_conda_list",
        "summary": "List Conda upstream configs for this repository.",
        "description": "List Conda upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CondaUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_conda_create",
        "summary": "Create a Conda upstream config for this repository.",
        "description": "Create a Conda upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CondaUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CondaUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/conda/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_conda_read",
        "summary": "Retrieve a Conda upstream config for this repository.",
        "description": "Retrieve a Conda upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CondaUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_conda_update",
        "summary": "Update a Conda upstream config for this repository.",
        "description": "Update a Conda upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CondaUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CondaUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_conda_partial_update",
        "summary": "Partially update a Conda upstream config for this repository.",
        "description": "Partially update a Conda upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CondaUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CondaUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_conda_delete",
        "summary": "Delete a Conda upstream config for this repository.",
        "description": "Delete a Conda upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/cran/": {
      "get": {
        "operationId": "repos_upstream_cran_list",
        "summary": "List CRAN upstream configs for this repository.",
        "description": "List CRAN upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CranUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_cran_create",
        "summary": "Create a CRAN upstream config for this repository.",
        "description": "Create a CRAN upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CranUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CranUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/cran/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_cran_read",
        "summary": "Retrieve a CRAN upstream config for this repository.",
        "description": "Retrieve a CRAN upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CranUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_cran_update",
        "summary": "Update a CRAN upstream config for this repository.",
        "description": "Update a CRAN upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CranUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CranUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_cran_partial_update",
        "summary": "Partially update a CRAN upstream config for this repository.",
        "description": "Partially update a CRAN upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CranUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CranUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_cran_delete",
        "summary": "Delete a CRAN upstream config for this repository.",
        "description": "Delete a CRAN upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/dart/": {
      "get": {
        "operationId": "repos_upstream_dart_list",
        "summary": "List Dart upstream configs for this repository.",
        "description": "List Dart upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DartUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_dart_create",
        "summary": "Create a Dart upstream config for this repository.",
        "description": "Create a Dart upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DartUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DartUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/dart/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_dart_read",
        "summary": "Retrieve a Dart upstream config for this repository.",
        "description": "Retrieve a Dart upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DartUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_dart_update",
        "summary": "Update a Dart upstream config for this repository.",
        "description": "Update a Dart upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DartUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DartUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_dart_partial_update",
        "summary": "Partially update a Dart upstream config for this repository.",
        "description": "Partially update a Dart upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DartUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DartUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_dart_delete",
        "summary": "Delete a Dart upstream config for this repository.",
        "description": "Delete a Dart upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/deb/": {
      "get": {
        "operationId": "repos_upstream_deb_list",
        "summary": "List Debian upstream configs for this repository.",
        "description": "List Debian upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DebUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_deb_create",
        "summary": "Create a Debian upstream config for this repository.",
        "description": "Create a Debian upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DebUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/deb/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_deb_read",
        "summary": "Retrieve a Debian upstream config for this repository.",
        "description": "Retrieve a Debian upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_deb_update",
        "summary": "Update a Debian upstream config for this repository.",
        "description": "Update a Debian upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_deb_partial_update",
        "summary": "Partially update a Debian upstream config for this repository.",
        "description": "Partially update a Debian upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_deb_delete",
        "summary": "Delete a Debian upstream config for this repository.",
        "description": "Delete a Debian upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/docker/": {
      "get": {
        "operationId": "repos_upstream_docker_list",
        "summary": "List Docker upstream configs for this repository.",
        "description": "List Docker upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DockerUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_docker_create",
        "summary": "Create a Docker upstream config for this repository.",
        "description": "Create a Docker upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DockerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/docker/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_docker_read",
        "summary": "Retrieve a Docker upstream config for this repository.",
        "description": "Retrieve a Docker upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DockerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_docker_update",
        "summary": "Update a Docker upstream config for this repository.",
        "description": "Update a Docker upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DockerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_docker_partial_update",
        "summary": "Partially update a Docker upstream config for this repository.",
        "description": "Partially update a Docker upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DockerUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DockerUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_docker_delete",
        "summary": "Delete a Docker upstream config for this repository.",
        "description": "Delete a Docker upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/go/": {
      "get": {
        "operationId": "repos_upstream_go_list",
        "summary": "List Go upstream configs for this repository.",
        "description": "List Go upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_go_create",
        "summary": "Create a Go upstream config for this repository.",
        "description": "Create a Go upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/go/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_go_read",
        "summary": "Retrieve a Go upstream config for this repository.",
        "description": "Retrieve a Go upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_go_update",
        "summary": "Update a Go upstream config for this repository.",
        "description": "Update a Go upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_go_partial_update",
        "summary": "Partially update a Go upstream config for this repository.",
        "description": "Partially update a Go upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GoUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_go_delete",
        "summary": "Delete a Go upstream config for this repository.",
        "description": "Delete a Go upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/helm/": {
      "get": {
        "operationId": "repos_upstream_helm_list",
        "summary": "List Helm upstream configs for this repository.",
        "description": "List Helm upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HelmUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_helm_create",
        "summary": "Create a Helm upstream config for this repository.",
        "description": "Create a Helm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HelmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HelmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/helm/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_helm_read",
        "summary": "Retrieve a Helm upstream config for this repository.",
        "description": "Retrieve a Helm upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HelmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_helm_update",
        "summary": "Update a Helm upstream config for this repository.",
        "description": "Update a Helm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HelmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HelmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_helm_partial_update",
        "summary": "Partially update a Helm upstream config for this repository.",
        "description": "Partially update a Helm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HelmUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HelmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_helm_delete",
        "summary": "Delete a Helm upstream config for this repository.",
        "description": "Delete a Helm upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/hex/": {
      "get": {
        "operationId": "repos_upstream_hex_list",
        "summary": "List Hex upstream configs for this repository.",
        "description": "List Hex upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HexUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_hex_create",
        "summary": "Create a Hex upstream config for this repository.",
        "description": "Create a Hex upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HexUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HexUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/hex/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_hex_read",
        "summary": "Retrieve a Hex upstream config for this repository.",
        "description": "Retrieve a Hex upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HexUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_hex_update",
        "summary": "Update a Hex upstream config for this repository.",
        "description": "Update a Hex upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HexUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HexUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_hex_partial_update",
        "summary": "Partially update a Hex upstream config for this repository.",
        "description": "Partially update a Hex upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HexUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HexUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_hex_delete",
        "summary": "Delete a Hex upstream config for this repository.",
        "description": "Delete a Hex upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/huggingface/": {
      "get": {
        "operationId": "repos_upstream_huggingface_list",
        "summary": "List Hugging Face upstream configs for this repository.",
        "description": "List Hugging Face upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HuggingfaceUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_huggingface_create",
        "summary": "Create a Hugging Face upstream config for this repository.",
        "description": "Create a Hugging Face upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/huggingface/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_huggingface_read",
        "summary": "Retrieve a Hugging Face upstream config for this repository.",
        "description": "Retrieve a Hugging Face upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_huggingface_update",
        "summary": "Update a Hugging Face upstream config for this repository.",
        "description": "Update a Hugging Face upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_huggingface_partial_update",
        "summary": "Partially update a Hugging Face upstream config for this repository.",
        "description": "Partially update a Hugging Face upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HuggingfaceUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_huggingface_delete",
        "summary": "Delete a Hugging Face upstream config for this repository.",
        "description": "Delete a Hugging Face upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/maven/": {
      "get": {
        "operationId": "repos_upstream_maven_list",
        "summary": "List Maven upstream configs for this repository.",
        "description": "List Maven upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MavenUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_maven_create",
        "summary": "Create a Maven upstream config for this repository.",
        "description": "Create a Maven upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MavenUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MavenUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/maven/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_maven_read",
        "summary": "Retrieve a Maven upstream config for this repository.",
        "description": "Retrieve a Maven upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MavenUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_maven_update",
        "summary": "Update a Maven upstream config for this repository.",
        "description": "Update a Maven upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MavenUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MavenUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_maven_partial_update",
        "summary": "Partially update a Maven upstream config for this repository.",
        "description": "Partially update a Maven upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MavenUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MavenUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_maven_delete",
        "summary": "Delete a Maven upstream config for this repository.",
        "description": "Delete a Maven upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/npm/": {
      "get": {
        "operationId": "repos_upstream_npm_list",
        "summary": "List npm upstream configs for this repository.",
        "description": "List npm upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NpmUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_npm_create",
        "summary": "Create a npm upstream config for this repository.",
        "description": "Create a npm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NpmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/npm/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_npm_read",
        "summary": "Retrieve a npm upstream config for this repository.",
        "description": "Retrieve a npm upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_npm_update",
        "summary": "Update a npm upstream config for this repository.",
        "description": "Update a npm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NpmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_npm_partial_update",
        "summary": "Partially update a npm upstream config for this repository.",
        "description": "Partially update a npm upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NpmUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_npm_delete",
        "summary": "Delete a npm upstream config for this repository.",
        "description": "Delete a npm upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/nuget/": {
      "get": {
        "operationId": "repos_upstream_nuget_list",
        "summary": "List NuGet upstream configs for this repository.",
        "description": "List NuGet upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NugetUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_nuget_create",
        "summary": "Create a NuGet upstream config for this repository.",
        "description": "Create a NuGet upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NugetUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NugetUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/nuget/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_nuget_read",
        "summary": "Retrieve a NuGet upstream config for this repository.",
        "description": "Retrieve a NuGet upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NugetUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_nuget_update",
        "summary": "Update a NuGet upstream config for this repository.",
        "description": "Update a NuGet upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NugetUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NugetUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_nuget_partial_update",
        "summary": "Partially update a NuGet upstream config for this repository.",
        "description": "Partially update a NuGet upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NugetUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NugetUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_nuget_delete",
        "summary": "Delete a NuGet upstream config for this repository.",
        "description": "Delete a NuGet upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/python/": {
      "get": {
        "operationId": "repos_upstream_python_list",
        "summary": "List Python upstream configs for this repository.",
        "description": "List Python upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PythonUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_python_create",
        "summary": "Create a Python upstream config for this repository.",
        "description": "Create a Python upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PythonUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PythonUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/python/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_python_read",
        "summary": "Retrieve a Python upstream config for this repository.",
        "description": "Retrieve a Python upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PythonUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_python_update",
        "summary": "Update a Python upstream config for this repository.",
        "description": "Update a Python upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PythonUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PythonUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_python_partial_update",
        "summary": "Partially update a Python upstream config for this repository.",
        "description": "Partially update a Python upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PythonUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PythonUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_python_delete",
        "summary": "Delete a Python upstream config for this repository.",
        "description": "Delete a Python upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/rpm/": {
      "get": {
        "operationId": "repos_upstream_rpm_list",
        "summary": "List RedHat upstream configs for this repository.",
        "description": "List RedHat upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RpmUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_rpm_create",
        "summary": "Create a RedHat upstream config for this repository.",
        "description": "Create a RedHat upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RpmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/rpm/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_rpm_read",
        "summary": "Retrieve a RedHat upstream config for this repository.",
        "description": "Retrieve a RedHat upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_rpm_update",
        "summary": "Update a RedHat upstream config for this repository.",
        "description": "Update a RedHat upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RpmUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_rpm_partial_update",
        "summary": "Partially update a RedHat upstream config for this repository.",
        "description": "Partially update a RedHat upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RpmUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RpmUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_rpm_delete",
        "summary": "Delete a RedHat upstream config for this repository.",
        "description": "Delete a RedHat upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/ruby/": {
      "get": {
        "operationId": "repos_upstream_ruby_list",
        "summary": "List Ruby upstream configs for this repository.",
        "description": "List Ruby upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RubyUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_ruby_create",
        "summary": "Create a Ruby upstream config for this repository.",
        "description": "Create a Ruby upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RubyUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RubyUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/ruby/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_ruby_read",
        "summary": "Retrieve a Ruby upstream config for this repository.",
        "description": "Retrieve a Ruby upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RubyUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_ruby_update",
        "summary": "Update a Ruby upstream config for this repository.",
        "description": "Update a Ruby upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RubyUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RubyUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_ruby_partial_update",
        "summary": "Partially update a Ruby upstream config for this repository.",
        "description": "Partially update a Ruby upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RubyUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RubyUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_ruby_delete",
        "summary": "Delete a Ruby upstream config for this repository.",
        "description": "Delete a Ruby upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/swift/": {
      "get": {
        "operationId": "repos_upstream_swift_list",
        "summary": "List Swift upstream configs for this repository.",
        "description": "List Swift upstream configs for this repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwiftUpstream"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "post": {
        "operationId": "repos_upstream_swift_create",
        "summary": "Create a Swift upstream config for this repository.",
        "description": "Create a Swift upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SwiftUpstreamRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SwiftUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/upstream/swift/{slug_perm}/": {
      "get": {
        "operationId": "repos_upstream_swift_read",
        "summary": "Retrieve a Swift upstream config for this repository.",
        "description": "Retrieve a Swift upstream config for this repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SwiftUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "put": {
        "operationId": "repos_upstream_swift_update",
        "summary": "Update a Swift upstream config for this repository.",
        "description": "Update a Swift upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SwiftUpstreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SwiftUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repos_upstream_swift_partial_update",
        "summary": "Partially update a Swift upstream config for this repository.",
        "description": "Partially update a Swift upstream config for this repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SwiftUpstreamRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SwiftUpstream"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "delete": {
        "operationId": "repos_upstream_swift_delete",
        "summary": "Delete a Swift upstream config for this repository.",
        "description": "Delete a Swift upstream config for this repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/x509-ecdsa/": {
      "get": {
        "operationId": "repos_x509_ecdsa_list",
        "summary": "Retrieve the active X.509 ECDSA certificate for the Repository.",
        "description": "Retrieve the active X.509 ECDSA certificate for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the active X.509 ECDSA Certificate.",
            "schema": {
              "$ref": "#/definitions/RepositoryX509EcdsaCertificate"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{identifier}/x509-rsa/": {
      "get": {
        "operationId": "repos_x509_rsa_list",
        "summary": "Retrieve the active X.509 RSA certificate for the Repository.",
        "description": "Retrieve the active X.509 RSA certificate for the Repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the active X.509 RSA Certificate.",
            "schema": {
              "$ref": "#/definitions/RepositoryX509RsaCertificate"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{repo}/retention/": {
      "get": {
        "operationId": "repo_retention_read",
        "summary": "Retrieve the retention rules for the repository.",
        "description": "Retrieve the retention rules for the repository.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the retention rules for the repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryRetentionRules"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "patch": {
        "operationId": "repo_retention_partial_update",
        "summary": "Update the retention rules for the repository.",
        "description": "Update the retention rules for the repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryRetentionRulesRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the retention rules for the repository.",
            "schema": {
              "$ref": "#/definitions/RepositoryRetentionRules"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/repos/{owner}/{repo}/transfer-region/": {
      "post": {
        "operationId": "repos_transfer_region",
        "summary": "Transfer a repository to a different region.",
        "description": "Transfer a repository to a different region.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryTransferRegionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository region transfer initiated."
          },
          "404": {
            "description": "Owner, namespace or repository not found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "402": {
            "description": "Custom storage regions not available on plan; upgrade your account!",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "repos"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/status/check/basic/": {
      "get": {
        "operationId": "status_check_basic",
        "summary": "Endpoint to check basic API connectivity.",
        "description": "Endpoint to check basic API connectivity.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status check was successful",
            "schema": {
              "$ref": "#/definitions/StatusBasic"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "status"
        ],
        "security": []
      },
      "parameters": []
    },
    "/storage-regions/": {
      "get": {
        "operationId": "storage-regions_list",
        "summary": "Get a list of all available storage regions.",
        "description": "Get a list of all available storage regions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available storage regions retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageRegion"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "storage-regions"
        ]
      },
      "parameters": []
    },
    "/storage-regions/{slug}/": {
      "get": {
        "operationId": "storage-regions_read",
        "summary": "Get a specific storage region.",
        "description": "Get a specific storage region.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StorageRegion"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "storage-regions"
        ]
      },
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/user/self/": {
      "get": {
        "operationId": "user_self",
        "summary": "Provide a brief for the current user (if any).",
        "description": "Provide a brief for the current user (if any).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved brief for the current user",
            "schema": {
              "$ref": "#/definitions/UserBrief"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/token/": {
      "post": {
        "operationId": "user_token_create",
        "summary": "Create or retrieve API token for a user.",
        "description": "Handles both:\n- Users authenticating with basic credentials to get a token\n- Two-factor authentication flow",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserAuthTokenRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Retrieved/created user API token/key.",
            "schema": {
              "$ref": "#/definitions/UserAuthToken"
            }
          },
          "403": {
            "description": "Locked out.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Failed to authenticate.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "basic": []
          }
        ]
      },
      "parameters": []
    },
    "/user/tokens/": {
      "get": {
        "operationId": "user_tokens_list",
        "summary": "Retrieve the API key assigned to the user that is currently authenticated.",
        "description": "Retrieve the API key assigned to the user that is currently authenticated.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the API key for the user that is currently authenticated.",
            "schema": {
              "required": [
                "results"
              ],
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserAuthenticationToken"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "post": {
        "operationId": "user_tokens_create",
        "summary": "Create an API key for the user that is currently authenticated.",
        "description": "Create an API key for the user that is currently authenticated.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created an API key for the user that is currently authenticated.",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationToken"
            }
          },
          "400": {
            "description": "User has already created an API key.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": []
    },
    "/user/tokens/{slug_perm}/refresh/": {
      "put": {
        "operationId": "user_tokens_refresh",
        "summary": "Refresh the specified API key for the user that is currently authenticated.",
        "description": "Refresh the specified API key for the user that is currently authenticated.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed the API key.",
            "schema": {
              "$ref": "#/definitions/UserAuthenticationToken"
            }
          },
          "404": {
            "description": "The specified API key cannot be found.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "parameters": [
        {
          "name": "slug_perm",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/profile/{slug}/": {
      "get": {
        "operationId": "users_profile_read",
        "summary": "Provide a brief for the specified user (if any).",
        "description": "Provide a brief for the specified user (if any).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved details for the specified user (or current user, if none was specified)",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "parameters": [
        {
          "name": "slug",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/vulnerabilities/{owner}/": {
      "get": {
        "operationId": "vulnerabilities_namespace_list",
        "summary": "Lists scan results for a specific namespace.",
        "description": "Lists scan results for a specific namespace.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VulnerabilityScanResultsList"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "vulnerabilities"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/vulnerabilities/{owner}/{repo}/": {
      "get": {
        "operationId": "vulnerabilities_repo_list",
        "summary": "Lists scan results for a specific repository.",
        "description": "Lists scan results for a specific repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VulnerabilityScanResultsList"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "vulnerabilities"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/vulnerabilities/{owner}/{repo}/{package}/": {
      "get": {
        "operationId": "vulnerabilities_package_list",
        "summary": "Lists scan results for a specific package.",
        "description": "Lists scan results for a specific package.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VulnerabilityScanResultsList"
              }
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "vulnerabilities"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/vulnerabilities/{owner}/{repo}/{package}/{identifier}/": {
      "get": {
        "operationId": "vulnerabilities_read",
        "summary": "Get a scan result.",
        "description": "Get a scan result.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VulnerabilityScanResults"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "vulnerabilities"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "package",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/webhooks/{owner}/{repo}/": {
      "get": {
        "operationId": "webhooks_list",
        "summary": "Get a list of all webhooks in a repository.",
        "description": "Get a list of all webhooks in a repository.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the list of webhooks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepositoryWebhook"
              }
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "webhooks"
        ]
      },
      "post": {
        "operationId": "webhooks_create",
        "summary": "Create a specific webhook in a repository.",
        "description": "Create a specific webhook in a repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryWebhookRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created the specified webhook",
            "schema": {
              "$ref": "#/definitions/RepositoryWebhook"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "webhooks"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/webhooks/{owner}/{repo}/{identifier}/": {
      "get": {
        "operationId": "webhooks_read",
        "summary": "Views for working with repository webhooks.",
        "description": "Views for working with repository webhooks.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RepositoryWebhook"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "webhooks"
        ]
      },
      "patch": {
        "operationId": "webhooks_partial_update",
        "summary": "Update a specific webhook in a repository.",
        "description": "Update a specific webhook in a repository.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RepositoryWebhookRequestPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated the specified webhook",
            "schema": {
              "$ref": "#/definitions/RepositoryWebhook"
            }
          },
          "404": {
            "description": "Owner namespace or repository not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "400": {
            "description": "Request could not be processed (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "webhooks"
        ]
      },
      "delete": {
        "operationId": "webhooks_delete",
        "summary": "Delete a specific webhook in a repository.",
        "description": "Delete a specific webhook in a repository.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted the specified webhook successfully."
          },
          "400": {
            "description": "The webhook cannot be deleted.",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          },
          "422": {
            "description": "Missing or invalid parameters (see detail).",
            "schema": {
              "$ref": "#/definitions/ErrorDetail"
            }
          }
        },
        "tags": [
          "webhooks"
        ]
      },
      "parameters": [
        {
          "name": "owner",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "repo",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    }
  },
  "definitions": {
    "ErrorDetail": {
      "required": [
        "detail"
      ],
      "type": "object",
      "properties": {
        "detail": {
          "title": "Detail",
          "description": "An extended message for the response.",
          "type": "string",
          "minLength": 1
        },
        "fields": {
          "title": "Fields",
          "description": "A Dictionary of related errors where key: Field and value: Array of Errors related to that field",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      }
    },
    "GeoIpLocation": {
      "required": [
        "city",
        "continent",
        "country",
        "postal_code"
      ],
      "type": "object",
      "properties": {
        "city": {
          "title": "City",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "continent": {
          "title": "Continent",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "country": {
          "title": "Country",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "country_code": {
          "title": "Country code",
          "type": "string",
          "readOnly": true
        },
        "latitude": {
          "title": "Latitude",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "longitude": {
          "title": "Longitude",
          "type": "string",
          "format": "decimal",
          "x-nullable": true
        },
        "postal_code": {
          "title": "Postal code",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "NamespaceAuditLog": {
      "required": [
        "actor",
        "actor_ip_address",
        "actor_location",
        "actor_slug_perm",
        "context",
        "event",
        "event_at",
        "object",
        "object_kind",
        "object_slug_perm",
        "target",
        "target_kind"
      ],
      "type": "object",
      "properties": {
        "actor": {
          "title": "Actor",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_ip_address": {
          "title": "Actor ip address",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_kind": {
          "title": "Actor kind",
          "type": "string",
          "readOnly": true
        },
        "actor_location": {
          "$ref": "#/definitions/GeoIpLocation"
        },
        "actor_slug_perm": {
          "title": "Actor slug perm",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_url": {
          "title": "Actor url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "context": {
          "title": "Context",
          "type": "string",
          "minLength": 1
        },
        "event": {
          "title": "Event",
          "type": "string",
          "minLength": 1
        },
        "event_at": {
          "title": "Event at",
          "type": "string",
          "format": "date-time"
        },
        "object": {
          "title": "Object",
          "type": "string",
          "minLength": 1
        },
        "object_kind": {
          "title": "Object kind",
          "type": "string",
          "minLength": 1
        },
        "object_slug_perm": {
          "title": "Object slug perm",
          "type": "string",
          "minLength": 1
        },
        "target": {
          "title": "Target",
          "type": "string",
          "minLength": 1
        },
        "target_kind": {
          "title": "Target kind",
          "type": "string",
          "minLength": 1
        },
        "target_slug_perm": {
          "title": "Target slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "maxLength": 24,
          "x-nullable": true
        },
        "uuid": {
          "title": "Uuid",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        }
      }
    },
    "RepositoryAuditLog": {
      "required": [
        "actor",
        "actor_ip_address",
        "actor_location",
        "actor_slug_perm",
        "context",
        "event",
        "event_at",
        "object",
        "object_kind",
        "object_slug_perm"
      ],
      "type": "object",
      "properties": {
        "actor": {
          "title": "Actor",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_ip_address": {
          "title": "Actor ip address",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_kind": {
          "title": "Actor kind",
          "type": "string",
          "readOnly": true
        },
        "actor_location": {
          "$ref": "#/definitions/GeoIpLocation"
        },
        "actor_slug_perm": {
          "title": "Actor slug perm",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "actor_url": {
          "title": "Actor url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "context": {
          "title": "Context",
          "type": "string",
          "minLength": 1
        },
        "event": {
          "title": "Event",
          "type": "string",
          "minLength": 1
        },
        "event_at": {
          "title": "Event at",
          "type": "string",
          "format": "date-time"
        },
        "object": {
          "title": "Object",
          "type": "string",
          "minLength": 1
        },
        "object_kind": {
          "title": "Object kind",
          "type": "string",
          "minLength": 1
        },
        "object_slug_perm": {
          "title": "Object slug perm",
          "type": "string",
          "minLength": 1
        },
        "uuid": {
          "title": "Uuid",
          "type": "string",
          "format": "uuid",
          "readOnly": true
        }
      }
    },
    "PackageVersionBadge": {
      "type": "object",
      "properties": {

      }
    },
    "DistributionVersion": {
      "description": "A list of the versions for this distribution",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The textual name for this version.",
          "type": "string",
          "maxLength": 64
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifier for this version",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "DistributionFull": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifier for this distribution",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "variants": {
          "title": "Variants",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        },
        "versions": {
          "description": "A list of the versions for this distribution",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionVersion"
          },
          "readOnly": true
        }
      }
    },
    "Eula": {
      "type": "object",
      "properties": {
        "identifier": {
          "title": "Identifier",
          "description": "A unique identifier that you can use for your own EULA tracking purposes. This might be a date, or a semantic version, etc. The only requirement is that it is unique across multiple EULAs.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "maxLength": 16,
          "x-nullable": true
        },
        "number": {
          "title": "Number",
          "description": "A sequential identifier that increments by one for each new commit in a repository.",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "RepositoryToken": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "clients": {
          "title": "Clients",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the token was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "created_by_url": {
          "title": "Created by url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default token for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "disable_url": {
          "title": "Disable url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "enable_url": {
          "title": "Enable url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "eula_accepted": {
          "$ref": "#/definitions/Eula"
        },
        "eula_accepted_at": {
          "title": "Eula accepted at",
          "description": "The datetime the EULA was accepted at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "eula_accepted_from": {
          "title": "Eula accepted from",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "eula_required": {
          "title": "Eula required",
          "description": "If checked, a EULA acceptance is required for this token.",
          "type": "boolean"
        },
        "has_limits": {
          "title": "Has limits",
          "type": "boolean",
          "readOnly": true
        },
        "identifier": {
          "title": "Identifier",
          "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified an entitlement within a repository.",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "is_active": {
          "title": "Token Active",
          "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
          "type": "boolean"
        },
        "is_limited": {
          "title": "Is limited",
          "type": "boolean",
          "readOnly": true
        },
        "limit_bandwidth": {
          "title": "Limit bandwidth",
          "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_bandwidth_unit": {
          "title": "Limit bandwidth unit",
          "type": "string",
          "enum": [
            "Byte",
            "Kilobyte",
            "Megabyte",
            "Gigabyte",
            "Terabyte",
            "Petabyte",
            "Exabyte",
            "Zettabyte",
            "Yottabyte"
          ],
          "default": "Byte",
          "x-nullable": true
        },
        "limit_date_range_from": {
          "title": "Limit date range from",
          "description": "The starting date/time the token is allowed to be used from.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_date_range_to": {
          "title": "Limit date range to",
          "description": "The ending date/time the token is allowed to be used until.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_num_clients": {
          "title": "Limit num clients",
          "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_num_downloads": {
          "title": "Limit num downloads",
          "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_package_query": {
          "title": "Limit package query",
          "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "limit_path_query": {
          "title": "Limit path query",
          "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "metadata": {
          "title": "Metadata",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "refresh_url": {
          "title": "Refresh url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "reset_url": {
          "title": "Reset url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "scheduled_reset_at": {
          "title": "Scheduled reset at",
          "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "scheduled_reset_period": {
          "title": "Scheduled reset period",
          "type": "string",
          "enum": [
            "Never Reset",
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Every 6 months",
            "Annual"
          ],
          "default": "Never Reset",
          "x-nullable": true
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "description": "The datetime the token was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "updated_by": {
          "title": "Updated by",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "updated_by_url": {
          "title": "Updated by url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "usage": {
          "title": "Usage",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user": {
          "title": "User",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "RepositoryTokenRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "eula_required": {
          "title": "Eula required",
          "description": "If checked, a EULA acceptance is required for this token.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Token Active",
          "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
          "type": "boolean"
        },
        "limit_bandwidth": {
          "title": "Limit bandwidth",
          "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_bandwidth_unit": {
          "title": "Limit bandwidth unit",
          "type": "string",
          "enum": [
            "Byte",
            "Kilobyte",
            "Megabyte",
            "Gigabyte",
            "Terabyte",
            "Petabyte",
            "Exabyte",
            "Zettabyte",
            "Yottabyte"
          ],
          "default": "Byte",
          "x-nullable": true
        },
        "limit_date_range_from": {
          "title": "Limit date range from",
          "description": "The starting date/time the token is allowed to be used from.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_date_range_to": {
          "title": "Limit date range to",
          "description": "The ending date/time the token is allowed to be used until.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_num_clients": {
          "title": "Limit num clients",
          "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_num_downloads": {
          "title": "Limit num downloads",
          "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_package_query": {
          "title": "Limit package query",
          "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "limit_path_query": {
          "title": "Limit path query",
          "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "metadata": {
          "title": "Metadata",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "scheduled_reset_at": {
          "title": "Scheduled reset at",
          "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "scheduled_reset_period": {
          "title": "Scheduled reset period",
          "type": "string",
          "enum": [
            "Never Reset",
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Every 6 months",
            "Annual"
          ],
          "default": "Never Reset",
          "x-nullable": true
        },
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryTokenSyncRequest": {
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "title": "Source",
          "description": "The source repository slug (in the same owner namespace).",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryTokenSync": {
      "type": "object",
      "properties": {
        "tokens": {
          "description": "The entitlements that have been synchronised.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryToken"
          },
          "readOnly": true
        }
      }
    },
    "RepositoryTokenRequestPatch": {
      "type": "object",
      "properties": {
        "eula_required": {
          "title": "Eula required",
          "description": "If checked, a EULA acceptance is required for this token.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Token Active",
          "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
          "type": "boolean"
        },
        "limit_bandwidth": {
          "title": "Limit bandwidth",
          "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_bandwidth_unit": {
          "title": "Limit bandwidth unit",
          "type": "string",
          "enum": [
            "Byte",
            "Kilobyte",
            "Megabyte",
            "Gigabyte",
            "Terabyte",
            "Petabyte",
            "Exabyte",
            "Zettabyte",
            "Yottabyte"
          ],
          "default": "Byte",
          "x-nullable": true
        },
        "limit_date_range_from": {
          "title": "Limit date range from",
          "description": "The starting date/time the token is allowed to be used from.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_date_range_to": {
          "title": "Limit date range to",
          "description": "The ending date/time the token is allowed to be used until.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_num_clients": {
          "title": "Limit num clients",
          "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_num_downloads": {
          "title": "Limit num downloads",
          "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_package_query": {
          "title": "Limit package query",
          "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "limit_path_query": {
          "title": "Limit path query",
          "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "metadata": {
          "title": "Metadata",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "scheduled_reset_at": {
          "title": "Scheduled reset at",
          "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "scheduled_reset_period": {
          "title": "Scheduled reset period",
          "type": "string",
          "enum": [
            "Never Reset",
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Every 6 months",
            "Annual"
          ],
          "default": "Never Reset",
          "x-nullable": true
        },
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryTokenAction": {
      "type": "object",
      "properties": {

      }
    },
    "RepositoryTokenRefreshRequest": {
      "type": "object",
      "properties": {
        "eula_required": {
          "title": "Eula required",
          "description": "If checked, a EULA acceptance is required for this token.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Token Active",
          "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
          "type": "boolean"
        },
        "limit_bandwidth": {
          "title": "Limit bandwidth",
          "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_bandwidth_unit": {
          "title": "Limit bandwidth unit",
          "type": "string",
          "enum": [
            "Byte",
            "Kilobyte",
            "Megabyte",
            "Gigabyte",
            "Terabyte",
            "Petabyte",
            "Exabyte",
            "Zettabyte",
            "Yottabyte"
          ],
          "default": "Byte",
          "x-nullable": true
        },
        "limit_date_range_from": {
          "title": "Limit date range from",
          "description": "The starting date/time the token is allowed to be used from.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_date_range_to": {
          "title": "Limit date range to",
          "description": "The ending date/time the token is allowed to be used until.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_num_clients": {
          "title": "Limit num clients",
          "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_num_downloads": {
          "title": "Limit num downloads",
          "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_package_query": {
          "title": "Limit package query",
          "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "limit_path_query": {
          "title": "Limit path query",
          "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "metadata": {
          "title": "Metadata",
          "type": "object",
          "x-nullable": true
        },
        "scheduled_reset_at": {
          "title": "Scheduled reset at",
          "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "scheduled_reset_period": {
          "title": "Scheduled reset period",
          "type": "string",
          "enum": [
            "Never Reset",
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Every 6 months",
            "Annual"
          ],
          "default": "Never Reset",
          "x-nullable": true
        },
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryTokenRefresh": {
      "type": "object",
      "properties": {
        "clients": {
          "title": "Clients",
          "type": "integer",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the token was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "created_by_url": {
          "title": "Created by url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default token for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "disable_url": {
          "title": "Disable url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "enable_url": {
          "title": "Enable url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "eula_accepted": {
          "$ref": "#/definitions/Eula"
        },
        "eula_accepted_at": {
          "title": "Eula accepted at",
          "description": "The datetime the EULA was accepted at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "eula_accepted_from": {
          "title": "Eula accepted from",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "eula_required": {
          "title": "Eula required",
          "description": "If checked, a EULA acceptance is required for this token.",
          "type": "boolean"
        },
        "has_limits": {
          "title": "Has limits",
          "type": "boolean",
          "readOnly": true
        },
        "identifier": {
          "title": "Identifier",
          "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified an entitlement within a repository.",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "is_active": {
          "title": "Token Active",
          "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
          "type": "boolean"
        },
        "is_limited": {
          "title": "Is limited",
          "type": "boolean",
          "readOnly": true
        },
        "limit_bandwidth": {
          "title": "Limit bandwidth",
          "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_bandwidth_unit": {
          "title": "Limit bandwidth unit",
          "type": "string",
          "enum": [
            "Byte",
            "Kilobyte",
            "Megabyte",
            "Gigabyte",
            "Terabyte",
            "Petabyte",
            "Exabyte",
            "Zettabyte",
            "Yottabyte"
          ],
          "default": "Byte",
          "x-nullable": true
        },
        "limit_date_range_from": {
          "title": "Limit date range from",
          "description": "The starting date/time the token is allowed to be used from.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_date_range_to": {
          "title": "Limit date range to",
          "description": "The ending date/time the token is allowed to be used until.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "limit_num_clients": {
          "title": "Limit num clients",
          "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_num_downloads": {
          "title": "Limit num downloads",
          "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
          "type": "integer",
          "maximum": 9.223372036854776e+18,
          "minimum": -9.223372036854776e+18,
          "x-nullable": true
        },
        "limit_package_query": {
          "title": "Limit package query",
          "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "limit_path_query": {
          "title": "Limit path query",
          "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "metadata": {
          "title": "Metadata",
          "type": "object",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "refresh_url": {
          "title": "Refresh url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "reset_url": {
          "title": "Reset url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "scheduled_reset_at": {
          "title": "Scheduled reset at",
          "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "scheduled_reset_period": {
          "title": "Scheduled reset period",
          "type": "string",
          "enum": [
            "Never Reset",
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Bi-Monthly",
            "Quarterly",
            "Every 6 months",
            "Annual"
          ],
          "default": "Never Reset",
          "x-nullable": true
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "description": "The datetime the token was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "updated_by": {
          "title": "Updated by",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "updated_by_url": {
          "title": "Updated by url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "usage": {
          "title": "Usage",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user": {
          "title": "User",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "PackageFileUploadRequest": {
      "required": [
        "filename"
      ],
      "type": "object",
      "properties": {
        "filename": {
          "title": "Filename",
          "description": "Filename for the package file upload.",
          "type": "string",
          "minLength": 1
        },
        "md5_checksum": {
          "title": "Md5 checksum",
          "description": "MD5 checksum for a POST-based package file upload.",
          "type": "string",
          "maxLength": 32,
          "minLength": 32
        },
        "method": {
          "title": "Method",
          "description": "The method to use for package file upload.",
          "type": "string",
          "enum": [
            "put_parts",
            "put",
            "post",
            "presigned",
            "unsigned_put"
          ],
          "default": "post"
        },
        "sha256_checksum": {
          "title": "Sha256 checksum",
          "description": "SHA256 checksum for a PUT-based package file upload.",
          "type": "string",
          "maxLength": 64,
          "minLength": 64
        }
      }
    },
    "PackageFileUpload": {
      "type": "object",
      "properties": {
        "identifier": {
          "title": "Identifier",
          "description": "The identifier for the file to use when creating packages",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "minLength": 1
        },
        "upload_fields": {
          "title": "Upload fields",
          "description": "The dictionary of fields that must be sent with POST uploads",
          "type": "object",
          "readOnly": true,
          "x-nullable": true
        },
        "upload_headers": {
          "title": "Upload headers",
          "description": "The dictionary of headers that must be sent with uploads",
          "type": "object",
          "readOnly": true,
          "x-nullable": true
        },
        "upload_querystring": {
          "title": "Upload querystring",
          "description": "The querystring to use for the next-step POST or PUT upload",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "upload_url": {
          "title": "Upload url",
          "description": "The URL to use for the next-step POST or PUT upload",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "PackageFilePartsUpload": {
      "type": "object",
      "properties": {
        "identifier": {
          "title": "Identifier",
          "description": "The identifier for the file to use uploading parts.",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "minLength": 1
        },
        "upload_querystring": {
          "title": "Upload querystring",
          "description": "The querystring to use for the next-step PUT upload.",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "upload_url": {
          "title": "Upload url",
          "description": "The URL to use for the next-step PUT upload",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "Distribution": {
      "description": "The distributions supported by this package format",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifier for this distribution",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "variants": {
          "title": "Variants",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "FormatSupportUpstream": {
      "description": "The upstream support for the package format",
      "required": [
        "auth_modes",
        "caching",
        "indexing",
        "proxying"
      ],
      "type": "object",
      "properties": {
        "auth_modes": {
          "description": "The authentication modes supported by the upstream format",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Username and Password",
              "Token",
              "Certificate and Key"
            ],
            "default": "Username and Password"
          }
        },
        "caching": {
          "title": "Caching",
          "description": "If true the upstream format supports caching",
          "type": "boolean"
        },
        "indexing": {
          "title": "Indexing",
          "description": "If true the upstream format supports indexing",
          "type": "boolean"
        },
        "indexing_behavior": {
          "title": "Indexing behavior",
          "description": "The behavior of the upstream when indexing",
          "type": "string",
          "enum": [
            "Unsupported",
            "Ahead-of-time (static) indexing",
            "Just-in-time (dynamic) indexing"
          ],
          "default": "Unsupported"
        },
        "proxying": {
          "title": "Proxying",
          "description": "If true the upstream format supports proxying",
          "type": "boolean"
        },
        "signature_verification": {
          "title": "Signature verification",
          "description": "The signature verification supported by the upstream format",
          "type": "string",
          "enum": [
            "Unsupported",
            "Repository Metadata",
            "Packages",
            "Repository Metadata and Packages"
          ],
          "default": "Unsupported"
        }
      }
    },
    "FormatSupport": {
      "description": "A set of what the package format supports",
      "required": [
        "dependencies",
        "distributions",
        "file_lists",
        "metadata",
        "upstreams",
        "versioning"
      ],
      "type": "object",
      "properties": {
        "dependencies": {
          "title": "Dependencies",
          "description": "If true the package format supports dependencies",
          "type": "boolean"
        },
        "distributions": {
          "title": "Distributions",
          "description": "If true the package format supports distributions",
          "type": "boolean"
        },
        "file_lists": {
          "title": "File lists",
          "description": "If true the package format supports file lists",
          "type": "boolean"
        },
        "metadata": {
          "title": "Metadata",
          "description": "If true the package format supports metadata",
          "type": "boolean"
        },
        "upstreams": {
          "$ref": "#/definitions/FormatSupportUpstream"
        },
        "versioning": {
          "title": "Versioning",
          "description": "If true the package format supports versioning",
          "type": "boolean"
        }
      }
    },
    "Format": {
      "required": [
        "description",
        "extensions",
        "name",
        "premium",
        "slug",
        "supports"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "description": "Description of the package format",
          "type": "string",
          "minLength": 1
        },
        "distributions": {
          "description": "The distributions supported by this package format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Distribution"
          },
          "x-nullable": true
        },
        "extensions": {
          "description": "A non-exhaustive list of extensions supported",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "name": {
          "title": "Name",
          "description": "Name for the package format",
          "type": "string",
          "minLength": 1
        },
        "premium": {
          "title": "Premium",
          "description": "If true the package format is a premium-only feature",
          "type": "boolean"
        },
        "premium_plan_id": {
          "title": "Premium plan id",
          "description": "The minimum plan id required for this package format",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "premium_plan_name": {
          "title": "Premium plan name",
          "description": "The minimum plan name required for this package format",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "slug": {
          "title": "Slug",
          "description": "Slug for the package format",
          "type": "string",
          "minLength": 1
        },
        "supports": {
          "$ref": "#/definitions/FormatSupport"
        }
      }
    },
    "CommonBandwidthMetricsValue": {
      "description": "Average bandwidth usage in the specified period, e.g. a day",
      "required": [
        "display",
        "value"
      ],
      "type": "object",
      "properties": {
        "display": {
          "title": "Display",
          "description": "Bandwidth usage value",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "units": {
          "title": "Units",
          "description": "Unit of measurement e.g. bytes",
          "type": "string",
          "default": "bytes",
          "minLength": 1
        },
        "value": {
          "title": "Value",
          "description": "Human readable version of display value",
          "type": "integer"
        }
      }
    },
    "CommonBandwidthMetrics": {
      "required": [
        "average",
        "highest",
        "lowest",
        "total"
      ],
      "type": "object",
      "properties": {
        "average": {
          "$ref": "#/definitions/CommonBandwidthMetricsValue"
        },
        "highest": {
          "$ref": "#/definitions/CommonBandwidthMetricsValue"
        },
        "lowest": {
          "$ref": "#/definitions/CommonBandwidthMetricsValue"
        },
        "total": {
          "$ref": "#/definitions/CommonBandwidthMetricsValue"
        }
      }
    },
    "CommonDownloadsMetricsValue": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "title": "Value",
          "type": "integer"
        }
      }
    },
    "CommonDownloadsMetrics": {
      "required": [
        "average",
        "highest",
        "lowest",
        "total"
      ],
      "type": "object",
      "properties": {
        "average": {
          "$ref": "#/definitions/CommonDownloadsMetricsValue"
        },
        "highest": {
          "$ref": "#/definitions/CommonDownloadsMetricsValue"
        },
        "lowest": {
          "$ref": "#/definitions/CommonDownloadsMetricsValue"
        },
        "total": {
          "$ref": "#/definitions/CommonDownloadsMetricsValue"
        }
      }
    },
    "CommonMetrics": {
      "required": [
        "bandwidth",
        "downloads"
      ],
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "Number of packages with at least 1 download",
          "type": "integer",
          "default": 0
        },
        "bandwidth": {
          "$ref": "#/definitions/CommonBandwidthMetrics"
        },
        "downloads": {
          "$ref": "#/definitions/CommonDownloadsMetrics"
        },
        "inactive": {
          "title": "Inactive",
          "description": "Packages with zero downloads",
          "type": "integer",
          "default": 0
        },
        "total": {
          "title": "Total",
          "description": "Total number of packages in repo",
          "type": "integer",
          "default": 0
        }
      }
    },
    "EntitlementUsageMetrics": {
      "required": [
        "tokens"
      ],
      "type": "object",
      "properties": {
        "tokens": {
          "$ref": "#/definitions/CommonMetrics"
        }
      }
    },
    "PackageUsageMetrics": {
      "required": [
        "packages"
      ],
      "type": "object",
      "properties": {
        "packages": {
          "$ref": "#/definitions/CommonMetrics"
        }
      }
    },
    "Namespace": {
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "type_name": {
          "title": "Type name",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Organization": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "country": {
          "title": "Country",
          "type": "string",
          "readOnly": true,
          "maxLength": 32,
          "minLength": 1,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "location": {
          "title": "Location",
          "description": "The city/town/area your organization is based in.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "readOnly": true
        },
        "tagline": {
          "title": "Tagline",
          "description": "A short public descriptive for your organization.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "PackageDenyPolicy": {
      "required": [
        "package_query_string"
      ],
      "type": "object",
      "properties": {
        "action": {
          "title": "Action",
          "type": "string",
          "enum": [
            "Block downloads"
          ],
          "readOnly": true,
          "default": "Block downloads"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether this rule is enabled or disabled.",
          "type": "boolean"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "x-nullable": true
        },
        "package_query_string": {
          "title": "Package query string",
          "description": "Packages that match this query will trigger this deny rule.",
          "type": "string",
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "Pending",
            "In Progress",
            "Complete",
            "Cancelled",
            "Errored"
          ],
          "readOnly": true,
          "default": "In Progress"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "PackageDenyPolicyRequest": {
      "required": [
        "package_query_string"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether this rule is enabled or disabled.",
          "type": "boolean"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "x-nullable": true
        },
        "package_query_string": {
          "title": "Package query string",
          "description": "Packages that match this query will trigger this deny rule.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageDenyPolicyRequestPatch": {
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether this rule is enabled or disabled.",
          "type": "boolean"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "x-nullable": true
        },
        "package_query_string": {
          "title": "Package query string",
          "description": "Packages that match this query will trigger this deny rule.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "OrganizationTeamInvite": {
      "required": [
        "team"
      ],
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user in the team.",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "team": {
          "title": "Team",
          "description": "The team identifier (slug).",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        }
      }
    },
    "OrganizationInvite": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "description": "The email of the user to be invited.",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "expires_at": {
          "title": "Expires at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "inviter": {
          "title": "Inviter",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "inviter_url": {
          "title": "Inviter url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "org": {
          "title": "Org",
          "type": "string",
          "readOnly": true
        },
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user.",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Member"
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationTeamInvite"
          }
        },
        "user": {
          "title": "User",
          "description": "The slug of the user to be invited.",
          "type": "string",
          "minLength": 1
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "OrganizationInviteRequest": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "description": "The email of the user to be invited.",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user.",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Member"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationTeamInvite"
          }
        },
        "user": {
          "title": "User",
          "description": "The slug of the user to be invited.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "OrganizationInviteUpdateRequestPatch": {
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user.",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Member"
        }
      }
    },
    "OrganizationInviteUpdate": {
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user.",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Member"
        }
      }
    },
    "OrganizationInviteExtend": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "description": "The email of the user to be invited.",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "expires_at": {
          "title": "Expires at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "inviter": {
          "title": "Inviter",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "inviter_url": {
          "title": "Inviter url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "org": {
          "title": "Org",
          "type": "string",
          "readOnly": true
        },
        "role": {
          "title": "Role",
          "description": "The role to be assigned to the invited user.",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Member"
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The slug_perm of the invite to be extended.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationTeamInvite"
          }
        },
        "user": {
          "title": "User",
          "description": "The slug of the user to be invited.",
          "type": "string",
          "minLength": 1
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "PackageVulnerability": {
      "required": [
        "identifier"
      ],
      "type": "object",
      "properties": {
        "identifier": {
          "title": "Identifier",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "NestedLicensePolicy": {
      "required": [
        "spdx_identifiers"
      ],
      "type": "object",
      "properties": {
        "allow_unknown_licenses": {
          "title": "Allow unknown licenses",
          "type": "boolean",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean",
          "readOnly": true
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "spdx_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageLicensePolicyViolationLog": {
      "required": [
        "package",
        "policy",
        "reasons"
      ],
      "type": "object",
      "properties": {
        "event_at": {
          "title": "Event at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "package": {
          "$ref": "#/definitions/PackageVulnerability"
        },
        "policy": {
          "$ref": "#/definitions/NestedLicensePolicy"
        },
        "reasons": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    },
    "OrganizationPackageLicensePolicy": {
      "required": [
        "name",
        "spdx_identifiers"
      ],
      "type": "object",
      "properties": {
        "allow_unknown_licenses": {
          "title": "Allow unknown licenses",
          "type": "boolean"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "spdx_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "OrganizationPackageLicensePolicyRequest": {
      "required": [
        "name",
        "spdx_identifiers"
      ],
      "type": "object",
      "properties": {
        "allow_unknown_licenses": {
          "title": "Allow unknown licenses",
          "type": "boolean"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "spdx_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "PackageLicensePolicyEvaluationRequest": {
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "evaluation_count": {
          "title": "Evaluation count",
          "type": "integer",
          "readOnly": true
        },
        "policy": {
          "$ref": "#/definitions/NestedLicensePolicy"
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "Pending",
            "In Progress",
            "Complete",
            "Cancelled",
            "Errored"
          ],
          "readOnly": true,
          "default": "Pending"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "violation_count": {
          "title": "Violation count",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "PackageLicensePolicyEvaluationRequestRequest": {
      "type": "object",
      "properties": {

      }
    },
    "OrganizationPackageLicensePolicyRequestPatch": {
      "type": "object",
      "properties": {
        "allow_unknown_licenses": {
          "title": "Allow unknown licenses",
          "type": "boolean"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "spdx_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "OrganizationMembership": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "has_two_factor": {
          "title": "Has two factor",
          "type": "boolean",
          "readOnly": true
        },
        "is_active": {
          "title": "Is active",
          "type": "boolean",
          "readOnly": true
        },
        "joined_at": {
          "title": "Joined at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_login_at": {
          "title": "Last login at",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "last_login_method": {
          "title": "Last login method",
          "type": "string",
          "enum": [
            "Unknown",
            "Password",
            "Social",
            "SAML",
            "OIDC"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "readOnly": true,
          "default": "Owner"
        },
        "user": {
          "title": "User",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_id": {
          "title": "User id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Public",
            "Private"
          ],
          "readOnly": true,
          "default": "Public"
        }
      }
    },
    "OrganizationMembershipRequestPatch": {
      "type": "object",
      "properties": {

      }
    },
    "OrganizationMembershipRoleUpdateRequestPatch": {
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Owner"
        }
      }
    },
    "OrganizationMembershipRoleUpdate": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "has_two_factor": {
          "title": "Has two factor",
          "type": "boolean",
          "readOnly": true
        },
        "joined_at": {
          "title": "Joined at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_login_at": {
          "title": "Last login at",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "last_login_method": {
          "title": "Last login method",
          "type": "string",
          "enum": [
            "Unknown",
            "Password",
            "Social",
            "SAML",
            "OIDC"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "default": "Owner"
        },
        "user": {
          "title": "User",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_id": {
          "title": "User id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Public",
            "Private"
          ],
          "readOnly": true,
          "default": "Public"
        }
      }
    },
    "OrganizationMembershipVisibilityUpdateRequestPatch": {
      "type": "object",
      "properties": {
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Public",
            "Private"
          ],
          "default": "Public"
        }
      }
    },
    "OrganizationMembershipVisibilityUpdate": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "has_two_factor": {
          "title": "Has two factor",
          "type": "boolean",
          "readOnly": true
        },
        "joined_at": {
          "title": "Joined at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_login_at": {
          "title": "Last login at",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "last_login_method": {
          "title": "Last login method",
          "type": "string",
          "enum": [
            "Unknown",
            "Password",
            "Social",
            "SAML",
            "OIDC"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Owner",
            "Manager",
            "Member",
            "Collaborator"
          ],
          "readOnly": true,
          "default": "Owner"
        },
        "user": {
          "title": "User",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_id": {
          "title": "User id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "user_url": {
          "title": "User url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Public",
            "Private"
          ],
          "default": "Public"
        }
      }
    },
    "ProviderSettings": {
      "required": [
        "claims",
        "enabled",
        "name",
        "provider_url"
      ],
      "type": "object",
      "properties": {
        "claims": {
          "title": "Claims",
          "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
          "type": "object"
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether the provider settings should be used for incoming OIDC requests.",
          "type": "boolean"
        },
        "mapping_claim": {
          "title": "Mapping claim",
          "description": "The OIDC claim to use for mapping to service accounts in dynamic_mappings.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of the provider settings are being configured for",
          "type": "string",
          "minLength": 1
        },
        "provider_url": {
          "title": "Provider url",
          "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "service_accounts": {
          "description": "The service accounts associated with these provider settings.",
          "type": "array",
          "items": {
            "description": "The service accounts associated with these provider settings.",
            "type": "string"
          },
          "uniqueItems": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug of the provider settings",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The unique, immutable identifier of the provider settings.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "DynamicMapping": {
      "description": "The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
      "required": [
        "claim_value",
        "service_account"
      ],
      "type": "object",
      "properties": {
        "claim_value": {
          "title": "Claim value",
          "description": "The OIDC token claim value that must be present in the token for it to successfully authenticate as the mapped `service_account`.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1
        },
        "service_account": {
          "title": "Service account",
          "description": "The service account associated with the provider setting and `claim_value`\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ProviderSettingsWriteRequest": {
      "required": [
        "claims",
        "enabled",
        "name",
        "provider_url"
      ],
      "type": "object",
      "properties": {
        "claims": {
          "title": "Claims",
          "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
          "type": "object"
        },
        "dynamic_mappings": {
          "description": "The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicMapping"
          }
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether the provider settings should be used for incoming OIDC requests.",
          "type": "boolean"
        },
        "mapping_claim": {
          "title": "Mapping claim",
          "description": "The OIDC claim to use for mapping to service accounts in dynamic_mappings. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of the provider settings are being configured for",
          "type": "string",
          "minLength": 1
        },
        "provider_url": {
          "title": "Provider url",
          "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "service_accounts": {
          "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
          "type": "array",
          "items": {
            "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "ProviderSettingsWrite": {
      "required": [
        "claims",
        "enabled",
        "name",
        "provider_url"
      ],
      "type": "object",
      "properties": {
        "claims": {
          "title": "Claims",
          "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
          "type": "object"
        },
        "dynamic_mappings": {
          "description": "The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicMapping"
          }
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether the provider settings should be used for incoming OIDC requests.",
          "type": "boolean"
        },
        "mapping_claim": {
          "title": "Mapping claim",
          "description": "The OIDC claim to use for mapping to service accounts in dynamic_mappings. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of the provider settings are being configured for",
          "type": "string",
          "minLength": 1
        },
        "provider_url": {
          "title": "Provider url",
          "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "service_accounts": {
          "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
          "type": "array",
          "items": {
            "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
            "type": "string"
          },
          "uniqueItems": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug of the provider settings",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The unique, immutable identifier of the provider settings.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "ProviderSettingsWriteRequestPatch": {
      "type": "object",
      "properties": {
        "claims": {
          "title": "Claims",
          "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
          "type": "object"
        },
        "dynamic_mappings": {
          "description": "The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DynamicMapping"
          }
        },
        "enabled": {
          "title": "Enabled",
          "description": "Whether the provider settings should be used for incoming OIDC requests.",
          "type": "boolean"
        },
        "mapping_claim": {
          "title": "Mapping claim",
          "description": "The OIDC claim to use for mapping to service accounts in dynamic_mappings. Cannot be provided if `service_accounts` is also set.\n\nNote: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of the provider settings are being configured for",
          "type": "string",
          "minLength": 1
        },
        "provider_url": {
          "title": "Provider url",
          "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "service_accounts": {
          "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
          "type": "array",
          "items": {
            "description": "The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.",
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "OrganizationSAMLAuth": {
      "required": [
        "saml_auth_enabled",
        "saml_auth_enforced"
      ],
      "type": "object",
      "properties": {
        "saml_auth_enabled": {
          "title": "Saml auth enabled",
          "type": "boolean"
        },
        "saml_auth_enforced": {
          "title": "Saml auth enforced",
          "type": "boolean"
        },
        "saml_metadata_inline": {
          "title": "Inline SAML metadata",
          "description": "If configured, SAML metadata will be used as entered instead of retrieved from a remote URL.",
          "type": "string",
          "maxLength": 32000
        },
        "saml_metadata_url": {
          "title": "Saml metadata url",
          "description": "If configured, SAML metadata be retrieved from a remote URL.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        }
      }
    },
    "OrganizationSAMLAuthRequestPatch": {
      "type": "object",
      "properties": {
        "saml_auth_enabled": {
          "title": "Saml auth enabled",
          "type": "boolean"
        },
        "saml_auth_enforced": {
          "title": "Saml auth enforced",
          "type": "boolean"
        },
        "saml_metadata_inline": {
          "title": "Inline SAML metadata",
          "description": "If configured, SAML metadata will be used as entered instead of retrieved from a remote URL.",
          "type": "string",
          "maxLength": 32000
        },
        "saml_metadata_url": {
          "title": "Saml metadata url",
          "description": "If configured, SAML metadata be retrieved from a remote URL.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        }
      }
    },
    "OrganizationGroupSync": {
      "required": [
        "idp_key",
        "idp_value",
        "team"
      ],
      "type": "object",
      "properties": {
        "idp_key": {
          "title": "Idp key",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "idp_value": {
          "title": "Idp value",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "team": {
          "title": "Team",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$"
        }
      }
    },
    "OrganizationGroupSyncRequest": {
      "required": [
        "idp_key",
        "idp_value",
        "organization",
        "team"
      ],
      "type": "object",
      "properties": {
        "idp_key": {
          "title": "Idp key",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "idp_value": {
          "title": "Idp value",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "organization": {
          "title": "Organization",
          "type": "string"
        },
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "team": {
          "title": "Team",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$"
        }
      }
    },
    "OrganizationGroupSyncStatus": {
      "type": "object",
      "properties": {
        "saml_group_sync_status": {
          "title": "Saml group sync status",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ServiceTeams": {
      "required": [
        "slug"
      ],
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "description": "The team role associated with the service",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Manager"
        },
        "slug": {
          "title": "Slug",
          "description": "The teams associated with the service",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        }
      }
    },
    "Service": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "created_by_url": {
          "title": "Created by url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "The description of the service",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1
        },
        "key": {
          "title": "Key",
          "description": "The API key of the service",
          "type": "string",
          "readOnly": true
        },
        "key_expires_at": {
          "title": "Key expires at",
          "description": "The time at which the API key will expire. This will only be populated if the Organization has an active API Key Policy.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of the service",
          "type": "string",
          "maxLength": 120,
          "minLength": 1
        },
        "role": {
          "title": "Role",
          "description": "The role of the service.",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "slug": {
          "title": "Slug",
          "description": "The slug of the service",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceTeams"
          }
        }
      }
    },
    "ServiceRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "description": "The description of the service",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "description": "The name of the service",
          "type": "string",
          "maxLength": 120,
          "minLength": 1
        },
        "role": {
          "title": "Role",
          "description": "The role of the service.",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceTeams"
          }
        }
      }
    },
    "ServiceRequestPatch": {
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "description": "The description of the service",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "description": "The name of the service",
          "type": "string",
          "maxLength": 120,
          "minLength": 1
        },
        "role": {
          "title": "Role",
          "description": "The role of the service.",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ],
          "default": "Member"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceTeams"
          }
        }
      }
    },
    "OrganizationTeam": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 140,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Visible",
            "Hidden"
          ],
          "default": "Visible"
        }
      }
    },
    "OrganizationTeamRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 140,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Visible",
            "Hidden"
          ],
          "default": "Visible"
        }
      }
    },
    "OrganizationTeamRequestPatch": {
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 140,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        },
        "visibility": {
          "title": "Visibility",
          "type": "string",
          "enum": [
            "Visible",
            "Hidden"
          ],
          "default": "Visible"
        }
      }
    },
    "OrganizationTeamMembership": {
      "description": "The team members",
      "required": [
        "role",
        "user"
      ],
      "type": "object",
      "properties": {
        "role": {
          "title": "Role",
          "type": "string",
          "enum": [
            "Manager",
            "Member"
          ]
        },
        "user": {
          "title": "User",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "OrganizationTeamMembers": {
      "required": [
        "members"
      ],
      "type": "object",
      "properties": {
        "members": {
          "description": "The team members",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationTeamMembership"
          }
        }
      }
    },
    "NestedVulnerabilityPolicy": {
      "type": "object",
      "properties": {
        "allow_unknown_severity": {
          "title": "Allow unknown severity",
          "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
          "type": "boolean",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "min_severity": {
          "title": "Min severity",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Critical"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean",
          "readOnly": true
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "NestedVulnerabilityScanResults": {
      "required": [
        "identifier",
        "scan_id"
      ],
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "description": "The time this scan result was stored.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "has_vulnerabilities": {
          "title": "Has vulnerabilities",
          "description": "Do the results contain any known vulnerabilities?",
          "type": "boolean",
          "readOnly": true
        },
        "identifier": {
          "title": "Identifier",
          "type": "string",
          "minLength": 1
        },
        "max_severity": {
          "title": "Max severity",
          "type": "string",
          "enum": [
            "Unknown",
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Unknown"
        },
        "num_vulnerabilities": {
          "title": "Num vulnerabilities",
          "type": "integer",
          "default": 0
        },
        "scan_id": {
          "title": "Scan id",
          "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
          "type": "integer",
          "x-nullable": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageVulnerabilityPolicyViolationLog": {
      "required": [
        "package",
        "policy",
        "reasons",
        "vulnerability_scan_results"
      ],
      "type": "object",
      "properties": {
        "event_at": {
          "title": "Event at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "package": {
          "$ref": "#/definitions/PackageVulnerability"
        },
        "policy": {
          "$ref": "#/definitions/NestedVulnerabilityPolicy"
        },
        "reasons": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "vulnerability_scan_results": {
          "$ref": "#/definitions/NestedVulnerabilityScanResults"
        }
      }
    },
    "OrganizationPackageVulnerabilityPolicy": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "allow_unknown_severity": {
          "title": "Allow unknown severity",
          "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
          "type": "boolean"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "min_severity": {
          "title": "Min severity",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Critical"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "OrganizationPackageVulnerabilityPolicyRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "allow_unknown_severity": {
          "title": "Allow unknown severity",
          "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
          "type": "boolean"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "min_severity": {
          "title": "Min severity",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Critical"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "PackageVulnerabilityPolicyEvaluationRequest": {
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "evaluation_count": {
          "title": "Evaluation count",
          "type": "integer",
          "readOnly": true
        },
        "policy": {
          "$ref": "#/definitions/NestedVulnerabilityPolicy"
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string",
          "enum": [
            "Pending",
            "In Progress",
            "Complete",
            "Cancelled",
            "Errored"
          ],
          "readOnly": true,
          "default": "Pending"
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "violation_count": {
          "title": "Violation count",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "PackageVulnerabilityPolicyEvaluationRequestRequest": {
      "type": "object",
      "properties": {

      }
    },
    "OrganizationPackageVulnerabilityPolicyRequestPatch": {
      "type": "object",
      "properties": {
        "allow_unknown_severity": {
          "title": "Allow unknown severity",
          "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
          "type": "boolean"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 250,
          "minLength": 1,
          "x-nullable": true
        },
        "min_severity": {
          "title": "Min severity",
          "type": "string",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Critical"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "on_violation_quarantine": {
          "title": "On violation quarantine",
          "type": "boolean"
        },
        "package_query_string": {
          "title": "Package query string",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "Architecture": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        }
      }
    },
    "PackageFile": {
      "type": "object",
      "properties": {
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_primary": {
          "title": "Is primary",
          "type": "boolean",
          "readOnly": true
        },
        "is_synchronised": {
          "title": "Is synchronised",
          "type": "boolean",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the file.",
          "type": "integer",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "tag": {
          "title": "Tag",
          "description": "Freeform descriptor that describes what the file is.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "Tags": {
      "description": "All tags on the package, grouped by tag type. This includes immutable tags, but doesn't distinguish them from mutable. To see which tags are immutable specifically, see the tags_immutable field.",
      "type": "object",
      "properties": {

      }
    },
    "Package": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageGroup": {
      "required": [
        "count",
        "last_push",
        "num_downloads",
        "size"
      ],
      "type": "object",
      "properties": {
        "backend_kind": {
          "title": "Backend kind",
          "type": "integer"
        },
        "count": {
          "title": "Count",
          "type": "integer",
          "x-nullable": true
        },
        "last_push": {
          "title": "Last push",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "num_downloads": {
          "title": "Num downloads",
          "type": "integer",
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "AlpinePackageUploadRequest": {
      "required": [
        "distribution",
        "package_file"
      ],
      "type": "object",
      "properties": {
        "distribution": {
          "title": "Distribution",
          "description": "The distribution to store the package for.",
          "type": "string",
          "minLength": 1
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "AlpinePackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "CargoPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "CargoPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "CocoapodsPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "CocoapodsPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ComposerPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        }
      }
    },
    "ComposerPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "ConanPackageUploadRequest": {
      "required": [
        "info_file",
        "manifest_file",
        "metadata_file",
        "package_file"
      ],
      "type": "object",
      "properties": {
        "conan_channel": {
          "title": "Conan channel",
          "description": "Conan channel.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "x-nullable": true
        },
        "conan_prefix": {
          "title": "Conan prefix",
          "description": "Conan prefix (User).",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "x-nullable": true
        },
        "info_file": {
          "title": "Info file",
          "description": "The info file is an python file containing the package metadata.",
          "type": "string",
          "minLength": 1
        },
        "manifest_file": {
          "title": "Manifest file",
          "description": "The info file is an python file containing the package metadata.",
          "type": "string",
          "minLength": 1
        },
        "metadata_file": {
          "title": "Metadata file",
          "description": "The conan file is an python file containing the package metadata.",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200,
          "x-nullable": true
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        }
      }
    },
    "ConanPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "conan_channel": {
          "title": "Conan channel",
          "description": "Conan channel.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "x-nullable": true
        },
        "conan_prefix": {
          "title": "Conan prefix",
          "description": "Conan prefix (User).",
          "type": "string",
          "maxLength": 128,
          "minLength": 1,
          "x-nullable": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "CondaPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "CondaPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "CranPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "architecture": {
          "title": "Architecture",
          "description": "Binary package uploads for macOS should specify the architecture they were built for.",
          "type": "string",
          "minLength": 1
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "r_version": {
          "title": "R version",
          "description": "Binary package uploads should specify the version of R they were built for.",
          "type": "string",
          "maxLength": 16,
          "minLength": 1,
          "x-nullable": true
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "CranPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "r_version": {
          "title": "R version",
          "description": "Binary package uploads should specify the version of R they were built for.",
          "type": "string",
          "maxLength": 16,
          "minLength": 1,
          "x-nullable": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DartPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "DartPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DebPackageUploadRequest": {
      "required": [
        "distribution",
        "package_file"
      ],
      "type": "object",
      "properties": {
        "changes_file": {
          "title": "Changes file",
          "description": "The changes archive containing the changes made to the source and debian packaging files",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "component": {
          "title": "Component",
          "description": "The component (channel) for the package (e.g. 'main', 'unstable', etc.)",
          "type": "string",
          "pattern": "^[-_.\\w]+$",
          "default": "main",
          "maxLength": 64,
          "minLength": 1
        },
        "distribution": {
          "title": "Distribution",
          "description": "The distribution to store the package for.",
          "type": "string",
          "minLength": 1
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "sources_file": {
          "title": "Sources file",
          "description": "The sources archive containing the source code for the binary",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "DebPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "DockerPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "DockerPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "GoPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "GoPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "HelmPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "provenance_file": {
          "title": "Provenance file",
          "description": "The provenance file containing the signature for the chart. If one is not provided, it will be generated automatically.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "HelmPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "HexPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "HexPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "HuggingfacePackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "HuggingfacePackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "LuarocksPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "LuarocksPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "MavenPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "artifact_id": {
          "title": "Artifact id",
          "description": "The ID of the artifact.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "extra_files": {
          "description": "Extra files to include in the package. This can be a single file or multiple files.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "x-nullable": true
        },
        "group_id": {
          "title": "Group id",
          "description": "Artifact's group ID.",
          "type": "string",
          "maxLength": 2083,
          "x-nullable": true
        },
        "ivy_file": {
          "title": "Ivy file",
          "description": "The ivy file is an XML file describing the dependencies of the project.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "javadoc_file": {
          "title": "Javadoc file",
          "description": "Adds bundled Java documentation to the Maven package",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "packaging": {
          "title": "Packaging",
          "description": "Artifact's Maven packaging type.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "pom_file": {
          "title": "Pom file",
          "description": "The POM file is an XML file containing the Maven coordinates.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "sbt_version": {
          "title": "Sbt version",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "scala_version": {
          "title": "Scala version",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "sources_file": {
          "title": "Sources file",
          "description": "Adds bundled Java source code to the Maven package.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "tests_file": {
          "title": "Tests file",
          "description": "Adds bundled Java tests to the Maven package.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        }
      }
    },
    "MavenPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "artifact_id": {
          "title": "Artifact id",
          "description": "The ID of the artifact.",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "group_id": {
          "title": "Group id",
          "description": "Artifact's group ID.",
          "type": "string",
          "maxLength": 2083,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "packaging": {
          "title": "Packaging",
          "description": "Artifact's Maven packaging type.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "sbt_version": {
          "title": "Sbt version",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "scala_version": {
          "title": "Scala version",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "NpmPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "npm_dist_tag": {
          "title": "Npm dist tag",
          "description": "The default npm dist-tag for this package/version - This will replace any other package/version if they are using the same tag.",
          "type": "string",
          "default": "latest",
          "maxLength": 255,
          "minLength": 1
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "NpmPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "NugetPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "symbols_file": {
          "title": "Symbols file",
          "description": "Uploads a symbols file as a separate package",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "NugetPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "P2PackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "P2PackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PythonPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "PythonPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "RawPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "content_type": {
          "title": "Content/Media Type",
          "description": "A custom content/media (also known as MIME) type to be sent when downloading this file. By default Cloudsmith will attempt to detect the type, but if you need to override it, you can specify it here.",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "maxLength": 12288,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200,
          "x-nullable": true
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        }
      }
    },
    "RawPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "maxLength": 12288,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "RpmPackageUploadRequest": {
      "required": [
        "distribution",
        "package_file"
      ],
      "type": "object",
      "properties": {
        "distribution": {
          "title": "Distribution",
          "description": "The distribution to store the package for.",
          "type": "string",
          "minLength": 1
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "RpmPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "RubyPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "RubyPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "SwiftPackageUploadRequest": {
      "required": [
        "name",
        "package_file",
        "scope",
        "version"
      ],
      "type": "object",
      "properties": {
        "author_name": {
          "title": "Author name",
          "description": "The name of the author of the package.",
          "type": "string",
          "minLength": 1
        },
        "author_org": {
          "title": "Author org",
          "description": "The organization of the author.",
          "type": "string",
          "minLength": 1
        },
        "license_url": {
          "title": "License url",
          "description": "The license URL of this package.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "readme_url": {
          "title": "Readme url",
          "description": "The URL of the readme for the package.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "description": "The URL of the SCM repository for the package.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "scope": {
          "title": "Scope",
          "description": "A scope provides a namespace for related packages within the package registry.",
          "type": "string",
          "maxLength": 39,
          "minLength": 1
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "SwiftPackageUpload": {
      "required": [
        "name",
        "scope",
        "version"
      ],
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "author_name": {
          "title": "Author name",
          "description": "The name of the author of the package.",
          "type": "string",
          "minLength": 1
        },
        "author_org": {
          "title": "Author org",
          "description": "The organization of the author.",
          "type": "string",
          "minLength": 1
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "license_url": {
          "title": "License url",
          "description": "The license URL of this package.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "readme_url": {
          "title": "Readme url",
          "description": "The URL of the readme for the package.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "description": "The URL of the SCM repository for the package.",
          "type": "string",
          "format": "uri",
          "minLength": 1
        },
        "scope": {
          "title": "Scope",
          "description": "A scope provides a namespace for related packages within the package registry.",
          "type": "string",
          "maxLength": 39,
          "minLength": 1
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "TerraformPackageUploadRequest": {
      "required": [
        "package_file"
      ],
      "type": "object",
      "properties": {
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "TerraformPackageUpload": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "VagrantPackageUploadRequest": {
      "required": [
        "name",
        "package_file",
        "provider",
        "version"
      ],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200
        },
        "package_file": {
          "title": "Package file",
          "description": "The primary file for the package.",
          "type": "string",
          "minLength": 1
        },
        "provider": {
          "title": "Provider",
          "description": "The virtual machine provider for the box.",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        },
        "tags": {
          "title": "Tags",
          "description": "A comma-separated values list of tags to add to the package.",
          "type": "string",
          "maxLength": 1024,
          "minLength": 1,
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "VagrantPackageUpload": {
      "required": [
        "name",
        "provider",
        "version"
      ],
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "maxLength": 200
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "provider": {
          "title": "Provider",
          "description": "The virtual machine provider for the box.",
          "type": "string",
          "minLength": 1
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "maxLength": 255
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageCopyRequest": {
      "required": [
        "destination"
      ],
      "type": "object",
      "properties": {
        "destination": {
          "title": "Destination",
          "type": "string",
          "minLength": 1
        },
        "republish": {
          "title": "Republish",
          "description": "If true, the package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
          "type": "boolean"
        }
      }
    },
    "PackageCopy": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "description": "The repository the package will be copied to.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageDependency": {
      "type": "object",
      "properties": {
        "dep_type": {
          "title": "Dep type",
          "type": "string",
          "enum": [
            "Depends",
            "Pre-Depends",
            "Recommends",
            "Suggests",
            "Enhances",
            "Replaces",
            "Breaks",
            "Built-Using",
            "Build-Depends",
            "Build-Depends-Indep",
            "Build-Conflicts",
            "Build-Conflicts-Indep",
            "Conflicts",
            "Provides",
            "Obsoletes",
            "Requires",
            "Runtime",
            "Development",
            "Compile",
            "Provided",
            "Test",
            "System",
            "Import",
            "Excluded",
            "Build-Requires",
            "Python-Requires"
          ],
          "readOnly": true,
          "default": "Depends"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "maxLength": 255,
          "minLength": 1
        },
        "operator": {
          "title": "Operator",
          "type": "string",
          "enum": [
            "=",
            "!=",
            "\u003C",
            "\u003C\u003C",
            "\u003C=",
            "\u003E",
            "\u003E\u003E",
            "\u003E=",
            "~=",
            "~\u003E",
            "matches"
          ],
          "readOnly": true,
          "default": "=",
          "x-nullable": true
        },
        "version": {
          "title": "Version",
          "type": "string",
          "readOnly": true,
          "maxLength": 128,
          "minLength": 1,
          "x-nullable": true
        }
      }
    },
    "PackageDependencies": {
      "required": [
        "dependencies"
      ],
      "type": "object",
      "properties": {
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageDependency"
          }
        }
      }
    },
    "PackageMoveRequest": {
      "required": [
        "destination"
      ],
      "type": "object",
      "properties": {
        "destination": {
          "title": "Destination",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "PackageMove": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "description": "The repository the package will be moved to.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageQuarantineRequest": {
      "type": "object",
      "properties": {
        "release": {
          "title": "Release",
          "description": "If true, the package is released from quarantine.",
          "type": "boolean"
        },
        "restore": {
          "title": "Restore",
          "description": "If true, the package is released from quarantine. Note: This field is deprecated, please use 'release' instead.",
          "type": "boolean"
        }
      }
    },
    "PackageQuarantine": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageResync": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "PackageStatus": {
      "type": "object",
      "properties": {
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "PackageTagRequest": {
      "type": "object",
      "properties": {
        "action": {
          "title": "Action",
          "type": "string",
          "enum": [
            "Add",
            "Clear",
            "Replace",
            "Remove"
          ],
          "default": "Add",
          "x-nullable": true
        },
        "is_immutable": {
          "title": "Is immutable",
          "description": "If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.",
          "type": "boolean",
          "default": false
        },
        "tags": {
          "description": "A list of tags to apply the action to. Not required for clears.",
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1
          },
          "default": [],
          "x-nullable": true
        }
      }
    },
    "PackageTag": {
      "type": "object",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Architecture"
          },
          "readOnly": true
        },
        "cdn_url": {
          "title": "Cdn url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "checksum_md5": {
          "title": "Checksum md5",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha1": {
          "title": "Checksum sha1",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha256": {
          "title": "Checksum sha256",
          "type": "string",
          "readOnly": true
        },
        "checksum_sha512": {
          "title": "Checksum sha512",
          "type": "string",
          "readOnly": true
        },
        "dependencies_checksum_md5": {
          "title": "Dependencies checksum md5",
          "description": "A checksum of all of the package's dependencies.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "dependencies_url": {
          "title": "Dependencies url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "description": "A textual description of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "display_name": {
          "title": "Display name",
          "type": "string",
          "readOnly": true
        },
        "distro": {
          "$ref": "#/definitions/Distribution"
        },
        "distro_version": {
          "$ref": "#/definitions/DistributionVersion"
        },
        "downloads": {
          "title": "Downloads",
          "type": "integer",
          "readOnly": true
        },
        "epoch": {
          "title": "Epoch",
          "description": "The epoch of the package version (if any).",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "extension": {
          "title": "Extension",
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "title": "Filename",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFile"
          },
          "readOnly": true
        },
        "format": {
          "title": "Format",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "format_url": {
          "title": "Format url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "freeable_storage": {
          "title": "Freeable storage",
          "description": "Amount of storage that will be freed if this package is deleted",
          "type": "integer",
          "readOnly": true
        },
        "fully_qualified_name": {
          "title": "Fully qualified name",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "identifier_perm": {
          "title": "Identifier perm",
          "description": "Unique and permanent identifier for the package.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "identifiers": {
          "title": "Identifiers",
          "description": "Return a map of identifier field names and their values.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "x-nullable": true
          },
          "readOnly": true
        },
        "indexed": {
          "title": "Indexed",
          "type": "boolean",
          "readOnly": true
        },
        "is_cancellable": {
          "title": "Is cancellable",
          "type": "boolean",
          "readOnly": true
        },
        "is_copyable": {
          "title": "Is copyable",
          "type": "boolean",
          "readOnly": true
        },
        "is_deleteable": {
          "title": "Is deleteable",
          "type": "boolean",
          "readOnly": true
        },
        "is_downloadable": {
          "title": "Is downloadable",
          "type": "boolean",
          "readOnly": true
        },
        "is_immutable": {
          "title": "Is immutable",
          "description": "If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.",
          "type": "boolean",
          "default": false
        },
        "is_moveable": {
          "title": "Is moveable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantinable": {
          "title": "Is quarantinable",
          "type": "boolean",
          "readOnly": true
        },
        "is_quarantined": {
          "title": "Is quarantined",
          "type": "boolean",
          "readOnly": true
        },
        "is_resyncable": {
          "title": "Is resyncable",
          "type": "boolean",
          "readOnly": true
        },
        "is_security_scannable": {
          "title": "Is security scannable",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_awaiting": {
          "title": "Is sync awaiting",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_completed": {
          "title": "Is sync completed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_failed": {
          "title": "Is sync failed",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_flight": {
          "title": "Is sync in flight",
          "type": "boolean",
          "readOnly": true
        },
        "is_sync_in_progress": {
          "title": "Is sync in progress",
          "type": "boolean",
          "readOnly": true
        },
        "license": {
          "title": "License",
          "description": "The license of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The name of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace_url": {
          "title": "Namespace url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "num_files": {
          "title": "Num files",
          "type": "integer",
          "readOnly": true
        },
        "origin_repository": {
          "title": "Origin repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "origin_repository_url": {
          "title": "Origin repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "package_type": {
          "title": "Package type",
          "description": "The type of package contents.",
          "type": "integer",
          "enum": [1, 2, 3, 9],
          "readOnly": true
        },
        "policy_violated": {
          "title": "Policy violated",
          "description": "Whether or not the package has violated any policy.",
          "type": "boolean",
          "readOnly": true
        },
        "release": {
          "title": "Release",
          "description": "The release of the package version (if any).",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "repository": {
          "title": "Repository",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "repository_url": {
          "title": "Repository url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "security_scan_completed_at": {
          "title": "Security scan completed at",
          "description": "The datetime the security scanning was completed.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_started_at": {
          "title": "Security scan started at",
          "description": "The datetime the security scanning was started.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "security_scan_status": {
          "title": "Security scan status",
          "type": "string",
          "enum": [
            "Awaiting Security Scan",
            "Security Scanning in Progress",
            "Scan Detected Vulnerabilities",
            "Scan Detected No Vulnerabilities",
            "Security Scanning Disabled",
            "Security Scanning Failed",
            "Security Scanning Skipped",
            "Security Scanning Not Supported"
          ],
          "readOnly": true,
          "default": "Awaiting Security Scan",
          "x-nullable": true
        },
        "security_scan_status_updated_at": {
          "title": "Security scan status updated at",
          "description": "The datetime the security scanning status was updated.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "self_html_url": {
          "title": "Self html url",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "signature_url": {
          "title": "Signature url",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the package.",
          "type": "integer",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The public unique identifier for the package.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "stage": {
          "title": "Stage",
          "description": "The synchronisation (in progress) stage of the package.",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
          "readOnly": true
        },
        "stage_str": {
          "title": "Stage str",
          "type": "string",
          "readOnly": true
        },
        "stage_updated_at": {
          "title": "Stage updated at",
          "description": "The datetime the package stage was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "description": "The synchronisation status of the package.",
          "type": "integer",
          "enum": [1, 2, 3, 4, 5, 6, 7],
          "readOnly": true
        },
        "status_reason": {
          "title": "Status reason",
          "description": "A textual description for the synchronous status reason (if any",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "status_str": {
          "title": "Status str",
          "type": "string",
          "readOnly": true
        },
        "status_updated_at": {
          "title": "Status updated at",
          "description": "The datetime the package status was updated at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status_url": {
          "title": "Status url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "readOnly": true
        },
        "summary": {
          "title": "Summary",
          "description": "A one-liner synopsis of this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_finished_at": {
          "title": "Sync finished at",
          "description": "The datetime the package sync was finished at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "sync_progress": {
          "title": "Sync progress",
          "description": "Synchronisation progress (from 0-100)",
          "type": "integer",
          "readOnly": true
        },
        "tags_immutable": {
          "$ref": "#/definitions/Tags"
        },
        "type_display": {
          "title": "Type display",
          "type": "string",
          "readOnly": true
        },
        "uploaded_at": {
          "title": "Uploaded at",
          "description": "The date this package was uploaded.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "uploader": {
          "title": "Uploader",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "uploader_url": {
          "title": "Uploader url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "version": {
          "title": "Version",
          "description": "The raw version for this package.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "version_orig": {
          "title": "Version orig",
          "type": "string",
          "readOnly": true
        },
        "vulnerability_scan_results_url": {
          "title": "Vulnerability scan results url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "Usage": {
      "type": "object",
      "properties": {
        "limit": {
          "title": "Limit",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "percentage": {
          "title": "Percentage",
          "type": "string",
          "maxLength": 10,
          "minLength": 1
        },
        "used": {
          "title": "Used",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        }
      }
    },
    "StorageUsage": {
      "type": "object",
      "properties": {
        "limit": {
          "title": "Limit",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "peak": {
          "title": "Peak",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "percentage": {
          "title": "Percentage",
          "type": "string",
          "maxLength": 10,
          "minLength": 1
        },
        "used": {
          "title": "Used",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        }
      }
    },
    "HistoryFieldset": {
      "required": [
        "downloaded",
        "storage_used",
        "uploaded"
      ],
      "type": "object",
      "properties": {
        "downloaded": {
          "$ref": "#/definitions/Usage"
        },
        "storage_used": {
          "$ref": "#/definitions/StorageUsage"
        },
        "uploaded": {
          "$ref": "#/definitions/Usage"
        }
      }
    },
    "UsageRaw": {
      "type": "object",
      "properties": {
        "limit": {
          "title": "Limit",
          "type": "integer"
        },
        "percentage": {
          "title": "Percentage",
          "type": "string",
          "format": "decimal"
        },
        "used": {
          "title": "Used",
          "type": "integer"
        }
      }
    },
    "StorageUsageRaw": {
      "type": "object",
      "properties": {
        "limit": {
          "title": "Limit",
          "type": "integer"
        },
        "peak": {
          "title": "Peak",
          "type": "integer"
        },
        "percentage": {
          "title": "Percentage",
          "type": "string",
          "format": "decimal"
        },
        "used": {
          "title": "Used",
          "type": "integer"
        }
      }
    },
    "HistoryFieldsetRaw": {
      "required": [
        "downloaded",
        "storage_used",
        "uploaded"
      ],
      "type": "object",
      "properties": {
        "downloaded": {
          "$ref": "#/definitions/UsageRaw"
        },
        "storage_used": {
          "$ref": "#/definitions/StorageUsageRaw"
        },
        "uploaded": {
          "$ref": "#/definitions/UsageRaw"
        }
      }
    },
    "History": {
      "required": [
        "display",
        "end",
        "plan",
        "raw",
        "start"
      ],
      "type": "object",
      "properties": {
        "days": {
          "title": "Days",
          "type": "integer",
          "default": 0
        },
        "display": {
          "$ref": "#/definitions/HistoryFieldset"
        },
        "end": {
          "title": "End",
          "type": "string",
          "format": "date-time"
        },
        "plan": {
          "title": "Plan",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "raw": {
          "$ref": "#/definitions/HistoryFieldsetRaw"
        },
        "start": {
          "title": "Start",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "QuotaHistory": {
      "required": [
        "history"
      ],
      "type": "object",
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/History"
          }
        }
      }
    },
    "AllocatedLimit": {
      "type": "object",
      "properties": {
        "configured": {
          "title": "Configured",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "percentage_used": {
          "title": "Percentage used",
          "type": "string",
          "maxLength": 10,
          "minLength": 1
        },
        "plan_limit": {
          "title": "Plan limit",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "used": {
          "title": "Used",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        }
      }
    },
    "StorageAllocatedLimit": {
      "type": "object",
      "properties": {
        "configured": {
          "title": "Configured",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "peak": {
          "title": "Peak",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "percentage_used": {
          "title": "Percentage used",
          "type": "string",
          "maxLength": 10,
          "minLength": 1
        },
        "plan_limit": {
          "title": "Plan limit",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "used": {
          "title": "Used",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        }
      }
    },
    "UsageLimits": {
      "required": [
        "bandwidth",
        "storage"
      ],
      "type": "object",
      "properties": {
        "bandwidth": {
          "$ref": "#/definitions/AllocatedLimit"
        },
        "storage": {
          "$ref": "#/definitions/StorageAllocatedLimit"
        }
      }
    },
    "AllocatedLimitRaw": {
      "type": "object",
      "properties": {
        "configured": {
          "title": "Configured",
          "type": "integer"
        },
        "percentage_used": {
          "title": "Percentage used",
          "type": "string",
          "format": "decimal"
        },
        "plan_limit": {
          "title": "Plan limit",
          "type": "integer"
        },
        "used": {
          "title": "Used",
          "type": "integer"
        }
      }
    },
    "StorageAllocatedLimitRaw": {
      "type": "object",
      "properties": {
        "configured": {
          "title": "Configured",
          "type": "integer"
        },
        "peak": {
          "title": "Peak",
          "type": "integer"
        },
        "percentage_used": {
          "title": "Percentage used",
          "type": "string",
          "format": "decimal"
        },
        "plan_limit": {
          "title": "Plan limit",
          "type": "integer"
        },
        "used": {
          "title": "Used",
          "type": "integer"
        }
      }
    },
    "UsageLimitsRaw": {
      "required": [
        "bandwidth",
        "storage"
      ],
      "type": "object",
      "properties": {
        "bandwidth": {
          "$ref": "#/definitions/AllocatedLimitRaw"
        },
        "storage": {
          "$ref": "#/definitions/StorageAllocatedLimitRaw"
        }
      }
    },
    "UsageFieldset": {
      "required": [
        "display",
        "raw"
      ],
      "type": "object",
      "properties": {
        "display": {
          "$ref": "#/definitions/UsageLimits"
        },
        "raw": {
          "$ref": "#/definitions/UsageLimitsRaw"
        }
      }
    },
    "Quota": {
      "required": [
        "usage"
      ],
      "type": "object",
      "properties": {
        "usage": {
          "$ref": "#/definitions/UsageFieldset"
        }
      }
    },
    "RateCheck": {
      "type": "object",
      "properties": {
        "interval": {
          "title": "Interval",
          "description": "The time in seconds that you are suggested to wait until the next request in order to avoid consuming too much within the rate limit window.",
          "type": "number",
          "readOnly": true
        },
        "limit": {
          "title": "Limit",
          "description": "The maximum number of requests that you are permitted to send per hour",
          "type": "integer",
          "readOnly": true
        },
        "remaining": {
          "title": "Remaining",
          "description": "The number of requests that are remaining in the current rate limit window",
          "type": "integer",
          "readOnly": true
        },
        "reset": {
          "title": "Reset",
          "description": "The UTC epoch timestamp at which the current rate limit window will reset",
          "type": "integer",
          "readOnly": true
        },
        "reset_iso_8601": {
          "title": "Reset iso 8601",
          "description": "The ISO 8601 datetime at which the current rate limit window will reset",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "throttled": {
          "title": "Throttled",
          "description": "If true, throttling is currently being enforced.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ResourcesRateCheck": {
      "type": "object",
      "properties": {
        "resources": {
          "title": "Resources",
          "description": "Rate limit values per resource",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RateCheck"
          },
          "readOnly": true
        }
      }
    },
    "RepositoryEcdsaKey": {
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "If selected this is the active key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "fingerprint": {
          "title": "Fingerprint",
          "description": "The long identifier used by ECDSA for this key.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "fingerprint_short": {
          "title": "Fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "public_key": {
          "title": "Public key",
          "description": "The public key given to repository users.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "ssh_fingerprint": {
          "title": "Ssh fingerprint",
          "description": "The SSH fingerprint used by ECDSA for this key.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "RepositoryGpgKey": {
      "required": [
        "comment"
      ],
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "If selected this is the active key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "comment": {
          "title": "Comment",
          "type": "string",
          "minLength": 1
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "fingerprint": {
          "title": "Fingerprint",
          "description": "The long identifier used by GPG for this key.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "fingerprint_short": {
          "title": "Fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "public_key": {
          "title": "Public key",
          "description": "The public key given to repository users.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "Repository": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "cdn_url": {
          "title": "Cdn url",
          "description": "Base URL from which packages and other artifacts are downloaded.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "content_kind": {
          "title": "Content kind",
          "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
          "type": "string",
          "enum": [
            "Standard",
            "Distribution",
            "Upstream"
          ],
          "default": "Standard"
        },
        "contextual_auth_realm": {
          "title": "Contextual Authentication Realm?",
          "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
          "type": "boolean"
        },
        "copy_own": {
          "title": "Users Can Copy Own Packages",
          "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "copy_packages": {
          "title": "Copy packages",
          "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "cosign_signing_enabled": {
          "title": "Cosign Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
          "type": "boolean"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default_privilege": {
          "title": "Default privilege",
          "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read",
            "None"
          ],
          "default": "None"
        },
        "delete_own": {
          "title": "Users Can Delete Own Packages",
          "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "delete_packages": {
          "title": "Delete packages",
          "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "deleted_at": {
          "title": "Deleted at",
          "description": "The datetime the repository was manually deleted at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "description": "A description of the repository's purpose/contents.",
          "type": "string"
        },
        "distributes": {
          "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
          "type": "array",
          "items": {
            "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
            "type": "string",
            "format": "slug",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "docker_refresh_tokens_enabled": {
          "title": "Docker Auth Refresh Enabled?",
          "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
          "type": "boolean"
        },
        "ecdsa_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryEcdsaKey"
          },
          "readOnly": true
        },
        "enforce_eula": {
          "title": "Require EULA acceptance for downloads?",
          "description": "If checked, downloads will explicitly require acceptance of an EULA.",
          "type": "boolean"
        },
        "gpg_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryGpgKey"
          },
          "readOnly": true
        },
        "index_files": {
          "title": "Index Files?",
          "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
          "type": "boolean"
        },
        "is_open_source": {
          "title": "Is open source",
          "type": "boolean",
          "readOnly": true
        },
        "is_private": {
          "title": "Is private",
          "type": "boolean",
          "readOnly": true
        },
        "is_public": {
          "title": "Is public",
          "type": "boolean",
          "readOnly": true
        },
        "manage_entitlements_privilege": {
          "title": "Manage entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "move_own": {
          "title": "Users Can Move Own Packages",
          "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "move_packages": {
          "title": "Move packages",
          "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for the repository.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 50,
          "minLength": 1
        },
        "namespace": {
          "title": "Namespace",
          "description": "Namespace to which this repository belongs.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true
        },
        "namespace_url": {
          "title": "Namespace url",
          "description": "API endpoint where data about this namespace can be retrieved.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "nuget_native_signing_enabled": {
          "title": "Nuget Native Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
          "type": "boolean"
        },
        "num_downloads": {
          "title": "Num downloads",
          "description": "The number of downloads for packages in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "num_policy_violated_packages": {
          "title": "Num policy violated packages",
          "description": "Number of packages with policy violations in a repository.",
          "type": "integer",
          "readOnly": true
        },
        "num_quarantined_packages": {
          "title": "Num quarantined packages",
          "description": "Number of quarantined packages in a repository.",
          "type": "integer",
          "readOnly": true
        },
        "open_source_license": {
          "title": "Open source license",
          "description": "The SPDX identifier of the open source license.",
          "type": "string",
          "x-nullable": true
        },
        "open_source_project_url": {
          "title": "Open-Source Project URL",
          "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "package_count": {
          "title": "Package count",
          "description": "The number of packages in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "package_group_count": {
          "title": "Package group count",
          "description": "The number of groups in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "proxy_npmjs": {
          "title": "Proxy Npm Packages?",
          "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "proxy_pypi": {
          "title": "Proxy Python Packages?",
          "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "raw_package_index_enabled": {
          "title": "Serve index for raw packages?",
          "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
          "type": "boolean"
        },
        "raw_package_index_signatures_enabled": {
          "title": "Display generated GPG signatures for the raw package index?",
          "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
          "type": "boolean"
        },
        "replace_packages": {
          "title": "Replace packages",
          "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Write"
        },
        "replace_packages_by_default": {
          "title": "Replace packages by default",
          "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
          "type": "boolean"
        },
        "repository_type": {
          "title": "Repository Type",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.",
          "type": "integer",
          "enum": [1, 2, 3],
          "readOnly": true
        },
        "repository_type_str": {
          "title": "Repository type str",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
          "type": "string",
          "enum": [
            "Public",
            "Private",
            "Open-Source"
          ],
          "default": "Public"
        },
        "resync_own": {
          "title": "Users Can Resync Own Packages",
          "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "resync_packages": {
          "title": "Resync packages",
          "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "scan_own": {
          "title": "Users Can Scan Own Packages",
          "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "scan_packages": {
          "title": "Scan packages",
          "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "self_html_url": {
          "title": "Self html url",
          "description": "Website URL for this repository.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "description": "API endpoint where data about this repository can be retrieved.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "show_setup_all": {
          "title": "Always show Set Me Up for all formats?",
          "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
          "type": "boolean"
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the repository.",
          "type": "integer",
          "readOnly": true
        },
        "size_str": {
          "title": "Size str",
          "description": "The calculated size of the repository (human readable).",
          "type": "string",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifies the repository in URIs.",
          "type": "string"
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "storage_region": {
          "title": "Storage region",
          "description": "The Cloudsmith region in which package files are stored.",
          "type": "string",
          "readOnly": true,
          "default": "default"
        },
        "strict_npm_validation": {
          "title": "Strict Npm Validation?",
          "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
          "type": "boolean"
        },
        "tag_pre_releases_as_latest": {
          "title": "Apply Latest Tag for Pre-Release Versions?",
          "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
          "type": "boolean"
        },
        "use_debian_labels": {
          "title": "Use Debian Labels?",
          "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-\u003Cidentifier\u003E'; or 'source=none' if no token was used. You can use this to help with pinning.",
          "type": "boolean"
        },
        "use_default_cargo_upstream": {
          "title": "Use crates.io as default Cargo upstream?",
          "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
          "type": "boolean"
        },
        "use_entitlements_privilege": {
          "title": "Use entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "use_noarch_packages": {
          "title": "Use/Configure NoArch Packages?",
          "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
          "type": "boolean"
        },
        "use_source_packages": {
          "title": "Use/Configure Source Packages?",
          "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
          "type": "boolean"
        },
        "use_vulnerability_scanning": {
          "title": "Use Vulnerability Scanning?",
          "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
          "type": "boolean"
        },
        "user_entitlements_enabled": {
          "title": "User Entitlements Enabled",
          "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
          "type": "boolean"
        },
        "view_statistics": {
          "title": "View statistics",
          "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        }
      }
    },
    "RepositoryCreateRequest": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "content_kind": {
          "title": "Content kind",
          "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
          "type": "string",
          "enum": [
            "Standard",
            "Distribution",
            "Upstream"
          ],
          "default": "Standard"
        },
        "contextual_auth_realm": {
          "title": "Contextual Authentication Realm?",
          "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
          "type": "boolean"
        },
        "copy_own": {
          "title": "Users Can Copy Own Packages",
          "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "copy_packages": {
          "title": "Copy packages",
          "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "cosign_signing_enabled": {
          "title": "Cosign Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
          "type": "boolean"
        },
        "default_privilege": {
          "title": "Default privilege",
          "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read",
            "None"
          ],
          "default": "None"
        },
        "delete_own": {
          "title": "Users Can Delete Own Packages",
          "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "delete_packages": {
          "title": "Delete packages",
          "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "description": {
          "title": "Description",
          "description": "A description of the repository's purpose/contents.",
          "type": "string"
        },
        "distributes": {
          "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
          "type": "array",
          "items": {
            "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
            "type": "string",
            "format": "slug",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "docker_refresh_tokens_enabled": {
          "title": "Docker Auth Refresh Enabled?",
          "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
          "type": "boolean"
        },
        "enforce_eula": {
          "title": "Require EULA acceptance for downloads?",
          "description": "If checked, downloads will explicitly require acceptance of an EULA.",
          "type": "boolean"
        },
        "index_files": {
          "title": "Index Files?",
          "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
          "type": "boolean"
        },
        "manage_entitlements_privilege": {
          "title": "Manage entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "move_own": {
          "title": "Users Can Move Own Packages",
          "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "move_packages": {
          "title": "Move packages",
          "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for the repository.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 50,
          "minLength": 1
        },
        "nuget_native_signing_enabled": {
          "title": "Nuget Native Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
          "type": "boolean"
        },
        "open_source_license": {
          "title": "Open source license",
          "description": "The SPDX identifier of the open source license.",
          "type": "string",
          "x-nullable": true
        },
        "open_source_project_url": {
          "title": "Open-Source Project URL",
          "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "proxy_npmjs": {
          "title": "Proxy Npm Packages?",
          "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "proxy_pypi": {
          "title": "Proxy Python Packages?",
          "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "raw_package_index_enabled": {
          "title": "Serve index for raw packages?",
          "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
          "type": "boolean"
        },
        "raw_package_index_signatures_enabled": {
          "title": "Display generated GPG signatures for the raw package index?",
          "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
          "type": "boolean"
        },
        "replace_packages": {
          "title": "Replace packages",
          "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Write"
        },
        "replace_packages_by_default": {
          "title": "Replace packages by default",
          "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
          "type": "boolean"
        },
        "repository_type_str": {
          "title": "Repository type str",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
          "type": "string",
          "enum": [
            "Public",
            "Private",
            "Open-Source"
          ],
          "default": "Public"
        },
        "resync_own": {
          "title": "Users Can Resync Own Packages",
          "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "resync_packages": {
          "title": "Resync packages",
          "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "scan_own": {
          "title": "Users Can Scan Own Packages",
          "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "scan_packages": {
          "title": "Scan packages",
          "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "show_setup_all": {
          "title": "Always show Set Me Up for all formats?",
          "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
          "type": "boolean"
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifies the repository in URIs.",
          "type": "string"
        },
        "storage_region": {
          "title": "Storage region",
          "description": "The Cloudsmith region in which package files are stored.",
          "type": "string",
          "default": "default"
        },
        "strict_npm_validation": {
          "title": "Strict Npm Validation?",
          "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
          "type": "boolean"
        },
        "tag_pre_releases_as_latest": {
          "title": "Apply Latest Tag for Pre-Release Versions?",
          "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
          "type": "boolean"
        },
        "use_debian_labels": {
          "title": "Use Debian Labels?",
          "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-\u003Cidentifier\u003E'; or 'source=none' if no token was used. You can use this to help with pinning.",
          "type": "boolean"
        },
        "use_default_cargo_upstream": {
          "title": "Use crates.io as default Cargo upstream?",
          "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
          "type": "boolean"
        },
        "use_entitlements_privilege": {
          "title": "Use entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "use_noarch_packages": {
          "title": "Use/Configure NoArch Packages?",
          "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
          "type": "boolean"
        },
        "use_source_packages": {
          "title": "Use/Configure Source Packages?",
          "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
          "type": "boolean"
        },
        "use_vulnerability_scanning": {
          "title": "Use Vulnerability Scanning?",
          "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
          "type": "boolean"
        },
        "user_entitlements_enabled": {
          "title": "User Entitlements Enabled",
          "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
          "type": "boolean"
        },
        "view_statistics": {
          "title": "View statistics",
          "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        }
      }
    },
    "RepositoryCreate": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "cdn_url": {
          "title": "Cdn url",
          "description": "Base URL from which packages and other artifacts are downloaded.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "content_kind": {
          "title": "Content kind",
          "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
          "type": "string",
          "enum": [
            "Standard",
            "Distribution",
            "Upstream"
          ],
          "default": "Standard"
        },
        "contextual_auth_realm": {
          "title": "Contextual Authentication Realm?",
          "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
          "type": "boolean"
        },
        "copy_own": {
          "title": "Users Can Copy Own Packages",
          "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "copy_packages": {
          "title": "Copy packages",
          "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "cosign_signing_enabled": {
          "title": "Cosign Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
          "type": "boolean"
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default_privilege": {
          "title": "Default privilege",
          "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read",
            "None"
          ],
          "default": "None"
        },
        "delete_own": {
          "title": "Users Can Delete Own Packages",
          "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "delete_packages": {
          "title": "Delete packages",
          "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "deleted_at": {
          "title": "Deleted at",
          "description": "The datetime the repository was manually deleted at.",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "description": "A description of the repository's purpose/contents.",
          "type": "string"
        },
        "distributes": {
          "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
          "type": "array",
          "items": {
            "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
            "type": "string",
            "format": "slug",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "docker_refresh_tokens_enabled": {
          "title": "Docker Auth Refresh Enabled?",
          "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
          "type": "boolean"
        },
        "ecdsa_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryEcdsaKey"
          },
          "readOnly": true
        },
        "enforce_eula": {
          "title": "Require EULA acceptance for downloads?",
          "description": "If checked, downloads will explicitly require acceptance of an EULA.",
          "type": "boolean"
        },
        "gpg_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryGpgKey"
          },
          "readOnly": true
        },
        "index_files": {
          "title": "Index Files?",
          "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
          "type": "boolean"
        },
        "is_open_source": {
          "title": "Is open source",
          "type": "boolean",
          "readOnly": true
        },
        "is_private": {
          "title": "Is private",
          "type": "boolean",
          "readOnly": true
        },
        "is_public": {
          "title": "Is public",
          "type": "boolean",
          "readOnly": true
        },
        "manage_entitlements_privilege": {
          "title": "Manage entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "move_own": {
          "title": "Users Can Move Own Packages",
          "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "move_packages": {
          "title": "Move packages",
          "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for the repository.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 50,
          "minLength": 1
        },
        "namespace": {
          "title": "Namespace",
          "description": "Namespace to which this repository belongs.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true
        },
        "namespace_url": {
          "title": "Namespace url",
          "description": "API endpoint where data about this namespace can be retrieved.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "nuget_native_signing_enabled": {
          "title": "Nuget Native Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
          "type": "boolean"
        },
        "num_downloads": {
          "title": "Num downloads",
          "description": "The number of downloads for packages in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "num_policy_violated_packages": {
          "title": "Num policy violated packages",
          "description": "Number of packages with policy violations in a repository.",
          "type": "integer",
          "readOnly": true
        },
        "num_quarantined_packages": {
          "title": "Num quarantined packages",
          "description": "Number of quarantined packages in a repository.",
          "type": "integer",
          "readOnly": true
        },
        "open_source_license": {
          "title": "Open source license",
          "description": "The SPDX identifier of the open source license.",
          "type": "string",
          "x-nullable": true
        },
        "open_source_project_url": {
          "title": "Open-Source Project URL",
          "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "package_count": {
          "title": "Package count",
          "description": "The number of packages in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "package_group_count": {
          "title": "Package group count",
          "description": "The number of groups in the repository.",
          "type": "integer",
          "readOnly": true
        },
        "proxy_npmjs": {
          "title": "Proxy Npm Packages?",
          "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "proxy_pypi": {
          "title": "Proxy Python Packages?",
          "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "raw_package_index_enabled": {
          "title": "Serve index for raw packages?",
          "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
          "type": "boolean"
        },
        "raw_package_index_signatures_enabled": {
          "title": "Display generated GPG signatures for the raw package index?",
          "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
          "type": "boolean"
        },
        "replace_packages": {
          "title": "Replace packages",
          "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Write"
        },
        "replace_packages_by_default": {
          "title": "Replace packages by default",
          "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
          "type": "boolean"
        },
        "repository_type": {
          "title": "Repository Type",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.",
          "type": "integer",
          "enum": [1, 2, 3],
          "readOnly": true
        },
        "repository_type_str": {
          "title": "Repository type str",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
          "type": "string",
          "enum": [
            "Public",
            "Private",
            "Open-Source"
          ],
          "default": "Public"
        },
        "resync_own": {
          "title": "Users Can Resync Own Packages",
          "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "resync_packages": {
          "title": "Resync packages",
          "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "scan_own": {
          "title": "Users Can Scan Own Packages",
          "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "scan_packages": {
          "title": "Scan packages",
          "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "self_html_url": {
          "title": "Self html url",
          "description": "Website URL for this repository.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "self_url": {
          "title": "Self url",
          "description": "API endpoint where data about this repository can be retrieved.",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "show_setup_all": {
          "title": "Always show Set Me Up for all formats?",
          "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
          "type": "boolean"
        },
        "size": {
          "title": "Size",
          "description": "The calculated size of the repository.",
          "type": "integer",
          "readOnly": true
        },
        "size_str": {
          "title": "Size str",
          "description": "The calculated size of the repository (human readable).",
          "type": "string",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifies the repository in URIs.",
          "type": "string"
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created.",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "storage_region": {
          "title": "Storage region",
          "description": "The Cloudsmith region in which package files are stored.",
          "type": "string",
          "default": "default"
        },
        "strict_npm_validation": {
          "title": "Strict Npm Validation?",
          "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
          "type": "boolean"
        },
        "tag_pre_releases_as_latest": {
          "title": "Apply Latest Tag for Pre-Release Versions?",
          "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
          "type": "boolean"
        },
        "use_debian_labels": {
          "title": "Use Debian Labels?",
          "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-\u003Cidentifier\u003E'; or 'source=none' if no token was used. You can use this to help with pinning.",
          "type": "boolean"
        },
        "use_default_cargo_upstream": {
          "title": "Use crates.io as default Cargo upstream?",
          "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
          "type": "boolean"
        },
        "use_entitlements_privilege": {
          "title": "Use entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "use_noarch_packages": {
          "title": "Use/Configure NoArch Packages?",
          "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
          "type": "boolean"
        },
        "use_source_packages": {
          "title": "Use/Configure Source Packages?",
          "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
          "type": "boolean"
        },
        "use_vulnerability_scanning": {
          "title": "Use Vulnerability Scanning?",
          "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
          "type": "boolean"
        },
        "user_entitlements_enabled": {
          "title": "User Entitlements Enabled",
          "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
          "type": "boolean"
        },
        "view_statistics": {
          "title": "View statistics",
          "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        }
      }
    },
    "RepositoryRequestPatch": {
      "type": "object",
      "properties": {
        "content_kind": {
          "title": "Content kind",
          "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
          "type": "string",
          "enum": [
            "Standard",
            "Distribution",
            "Upstream"
          ],
          "default": "Standard"
        },
        "contextual_auth_realm": {
          "title": "Contextual Authentication Realm?",
          "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
          "type": "boolean"
        },
        "copy_own": {
          "title": "Users Can Copy Own Packages",
          "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "copy_packages": {
          "title": "Copy packages",
          "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "cosign_signing_enabled": {
          "title": "Cosign Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
          "type": "boolean"
        },
        "default_privilege": {
          "title": "Default privilege",
          "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read",
            "None"
          ],
          "default": "None"
        },
        "delete_own": {
          "title": "Users Can Delete Own Packages",
          "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "delete_packages": {
          "title": "Delete packages",
          "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "description": {
          "title": "Description",
          "description": "A description of the repository's purpose/contents.",
          "type": "string"
        },
        "distributes": {
          "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
          "type": "array",
          "items": {
            "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
            "type": "string",
            "format": "slug",
            "pattern": "^[-a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "docker_refresh_tokens_enabled": {
          "title": "Docker Auth Refresh Enabled?",
          "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
          "type": "boolean"
        },
        "enforce_eula": {
          "title": "Require EULA acceptance for downloads?",
          "description": "If checked, downloads will explicitly require acceptance of an EULA.",
          "type": "boolean"
        },
        "index_files": {
          "title": "Index Files?",
          "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
          "type": "boolean"
        },
        "manage_entitlements_privilege": {
          "title": "Manage entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "move_own": {
          "title": "Users Can Move Own Packages",
          "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "move_packages": {
          "title": "Move packages",
          "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Admin"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for the repository.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 50,
          "minLength": 1
        },
        "nuget_native_signing_enabled": {
          "title": "Nuget Native Signing Enabled?",
          "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
          "type": "boolean"
        },
        "open_source_license": {
          "title": "Open source license",
          "description": "The SPDX identifier of the open source license.",
          "type": "string",
          "x-nullable": true
        },
        "open_source_project_url": {
          "title": "Open-Source Project URL",
          "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "x-nullable": true
        },
        "proxy_npmjs": {
          "title": "Proxy Npm Packages?",
          "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "proxy_pypi": {
          "title": "Proxy Python Packages?",
          "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
          "type": "boolean"
        },
        "raw_package_index_enabled": {
          "title": "Serve index for raw packages?",
          "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
          "type": "boolean"
        },
        "raw_package_index_signatures_enabled": {
          "title": "Display generated GPG signatures for the raw package index?",
          "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
          "type": "boolean"
        },
        "replace_packages": {
          "title": "Replace packages",
          "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Write"
        },
        "replace_packages_by_default": {
          "title": "Replace packages by default",
          "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
          "type": "boolean"
        },
        "repository_type_str": {
          "title": "Repository type str",
          "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
          "type": "string",
          "enum": [
            "Public",
            "Private",
            "Open-Source"
          ],
          "default": "Public"
        },
        "resync_own": {
          "title": "Users Can Resync Own Packages",
          "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "resync_packages": {
          "title": "Resync packages",
          "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write"
          ],
          "default": "Admin"
        },
        "scan_own": {
          "title": "Users Can Scan Own Packages",
          "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
          "type": "boolean"
        },
        "scan_packages": {
          "title": "Scan packages",
          "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "show_setup_all": {
          "title": "Always show Set Me Up for all formats?",
          "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
          "type": "boolean"
        },
        "slug": {
          "title": "Slug",
          "description": "The slug identifies the repository in URIs.",
          "type": "string"
        },
        "strict_npm_validation": {
          "title": "Strict Npm Validation?",
          "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
          "type": "boolean"
        },
        "tag_pre_releases_as_latest": {
          "title": "Apply Latest Tag for Pre-Release Versions?",
          "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
          "type": "boolean"
        },
        "use_debian_labels": {
          "title": "Use Debian Labels?",
          "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-\u003Cidentifier\u003E'; or 'source=none' if no token was used. You can use this to help with pinning.",
          "type": "boolean"
        },
        "use_default_cargo_upstream": {
          "title": "Use crates.io as default Cargo upstream?",
          "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
          "type": "boolean"
        },
        "use_entitlements_privilege": {
          "title": "Use entitlements privilege",
          "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        },
        "use_noarch_packages": {
          "title": "Use/Configure NoArch Packages?",
          "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
          "type": "boolean"
        },
        "use_source_packages": {
          "title": "Use/Configure Source Packages?",
          "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
          "type": "boolean"
        },
        "use_vulnerability_scanning": {
          "title": "Use Vulnerability Scanning?",
          "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
          "type": "boolean"
        },
        "user_entitlements_enabled": {
          "title": "User Entitlements Enabled",
          "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
          "type": "boolean"
        },
        "view_statistics": {
          "title": "View statistics",
          "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ],
          "default": "Read"
        }
      }
    },
    "RepositoryEcdsaKeyCreate": {
      "required": [
        "ecdsa_private_key"
      ],
      "type": "object",
      "properties": {
        "ecdsa_passphrase": {
          "title": "Ecdsa passphrase",
          "description": "The ECDSA passphrase used for signing.",
          "type": "string",
          "minLength": 1
        },
        "ecdsa_private_key": {
          "title": "Ecdsa private key",
          "description": "The ECDSA private key.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryGeoIpCidr": {
      "required": [
        "allow",
        "deny"
      ],
      "type": "object",
      "properties": {
        "allow": {
          "description": "The allowed CIDRs for this repository",
          "type": "array",
          "items": {
            "description": "The allowed CIDRs for this repository",
            "type": "string"
          },
          "uniqueItems": true
        },
        "deny": {
          "description": "The denied CIDRs for this repository",
          "type": "array",
          "items": {
            "description": "The denied CIDRs for this repository",
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "RepositoryGeoIpCountryCode": {
      "required": [
        "allow",
        "deny"
      ],
      "type": "object",
      "properties": {
        "allow": {
          "description": "The allowed country codes for this repository",
          "type": "array",
          "items": {
            "description": "The allowed country codes for this repository",
            "type": "string"
          },
          "uniqueItems": true
        },
        "deny": {
          "description": "The denied country codes for this repository",
          "type": "array",
          "items": {
            "description": "The denied country codes for this repository",
            "type": "string"
          },
          "uniqueItems": true
        }
      }
    },
    "RepositoryGeoIpRules": {
      "required": [
        "cidr",
        "country_code"
      ],
      "type": "object",
      "properties": {
        "cidr": {
          "$ref": "#/definitions/RepositoryGeoIpCidr"
        },
        "country_code": {
          "$ref": "#/definitions/RepositoryGeoIpCountryCode"
        }
      }
    },
    "RepositoryGeoIpRulesRequest": {
      "required": [
        "cidr",
        "country_code"
      ],
      "type": "object",
      "properties": {
        "cidr": {
          "$ref": "#/definitions/RepositoryGeoIpCidr"
        },
        "country_code": {
          "$ref": "#/definitions/RepositoryGeoIpCountryCode"
        }
      }
    },
    "RepositoryGeoIpRulesRequestPatch": {
      "type": "object",
      "properties": {
        "cidr": {
          "$ref": "#/definitions/RepositoryGeoIpCidr"
        },
        "country_code": {
          "$ref": "#/definitions/RepositoryGeoIpCountryCode"
        }
      }
    },
    "RespositoryGeoIpEnableDisableRequest": {
      "type": "object",
      "properties": {

      }
    },
    "RespositoryGeoIpEnableDisable": {
      "type": "object",
      "properties": {

      }
    },
    "RepositoryGeoIpStatus": {
      "type": "object",
      "properties": {
        "geoip_enabled": {
          "title": "Geo/IP Restriction Enabled?",
          "description": "If checked, any access to the website or downloads for this repository is allowed/denied according to the configured Geo/IP restriction rules.",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "RepositoryGeoIpTestAddress": {
      "required": [
        "addresses"
      ],
      "type": "object",
      "properties": {
        "addresses": {
          "description": "The IP addresses to test against this repository",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    },
    "RepositoryGeoIpTestAddressResponseDict": {
      "required": [
        "allowed",
        "country_code",
        "ip_address",
        "reason"
      ],
      "type": "object",
      "properties": {
        "allowed": {
          "title": "Allowed",
          "description": "The result of the IP test",
          "type": "boolean"
        },
        "country_code": {
          "title": "Country code",
          "description": "The country code of the tested IP address",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "ip_address": {
          "title": "Ip address",
          "description": "The IP address that was tested",
          "type": "string",
          "minLength": 1
        },
        "reason": {
          "title": "Reason",
          "description": "The reason for the result",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryGeoIpTestAddressResponse": {
      "required": [
        "addresses"
      ],
      "type": "object",
      "properties": {
        "addresses": {
          "description": "The IP address test results ordered by allowed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryGeoIpTestAddressResponseDict"
          }
        }
      }
    },
    "RepositoryGpgKeyCreate": {
      "required": [
        "gpg_private_key"
      ],
      "type": "object",
      "properties": {
        "gpg_passphrase": {
          "title": "Gpg passphrase",
          "description": "The GPG passphrase used for signing.",
          "type": "string",
          "minLength": 1
        },
        "gpg_private_key": {
          "title": "Gpg private key",
          "description": "The GPG private key.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "RepositoryPrivilegeDict": {
      "required": [
        "privilege"
      ],
      "type": "object",
      "properties": {
        "privilege": {
          "title": "Privilege",
          "description": "The level of privilege that the user or team should be granted to the specified repository.",
          "type": "string",
          "enum": [
            "Admin",
            "Write",
            "Read"
          ]
        },
        "service": {
          "title": "Service",
          "description": "The service identifier (slug).",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        },
        "team": {
          "title": "Team",
          "description": "The team identifier (slug).",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        },
        "user": {
          "title": "User",
          "description": "The user identifier (slug).",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "minLength": 1
        }
      }
    },
    "RepositoryPrivilegeInput": {
      "required": [
        "privileges"
      ],
      "type": "object",
      "properties": {
        "privileges": {
          "description": "List of objects with explicit privileges to the repository.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryPrivilegeDict"
          }
        }
      }
    },
    "RepositoryPrivilegeInputRequest": {
      "required": [
        "privileges"
      ],
      "type": "object",
      "properties": {
        "privileges": {
          "description": "List of objects with explicit privileges to the repository.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryPrivilegeDict"
          }
        }
      }
    },
    "RepositoryPrivilegeInputRequestPatch": {
      "type": "object",
      "properties": {
        "privileges": {
          "description": "List of objects with explicit privileges to the repository.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RepositoryPrivilegeDict"
          }
        }
      }
    },
    "RepositoryRsaKey": {
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "If selected this is the active key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "fingerprint": {
          "title": "Fingerprint",
          "description": "The long identifier used by RSA for this key.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "fingerprint_short": {
          "title": "Fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "public_key": {
          "title": "Public key",
          "description": "The public key given to repository users.",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "ssh_fingerprint": {
          "title": "Ssh fingerprint",
          "description": "The SSH fingerprint used by RSA for this key.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "RepositoryRsaKeyCreate": {
      "required": [
        "rsa_private_key"
      ],
      "type": "object",
      "properties": {
        "rsa_passphrase": {
          "title": "Rsa passphrase",
          "description": "The RSA passphrase used for signing.",
          "type": "string",
          "minLength": 1
        },
        "rsa_private_key": {
          "title": "Rsa private key",
          "description": "The RSA private key.",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "CargoUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CargoUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CargoUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "ComposerUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "ComposerUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "ComposerUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CondaUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CondaUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CondaUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CranUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CranUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "CranUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DartUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DartUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DartUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DebUpstream": {
      "required": [
        "distro_versions",
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "component": {
          "title": "Component",
          "description": "The component to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "distro_versions": {
          "description": "The distribution version that packages found on this upstream could be associated with.",
          "type": "array",
          "items": {
            "description": "The distribution version that packages found on this upstream could be associated with.",
            "type": "string"
          },
          "uniqueItems": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When true, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_distribution": {
          "title": "Upstream distribution",
          "description": "The distribution to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "x-nullable": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verification_status": {
          "title": "Verification status",
          "description": "The signature verification status for this upstream.",
          "type": "string",
          "enum": [
            "Unknown",
            "Invalid",
            "Valid",
            "Invalid (No Key)"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DebUpstreamRequest": {
      "required": [
        "distro_versions",
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "component": {
          "title": "Component",
          "description": "The component to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "distro_versions": {
          "description": "The distribution version that packages found on this upstream could be associated with.",
          "type": "array",
          "items": {
            "description": "The distribution version that packages found on this upstream could be associated with.",
            "type": "string"
          },
          "uniqueItems": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When true, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_distribution": {
          "title": "Upstream distribution",
          "description": "The distribution to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "x-nullable": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DebUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "component": {
          "title": "Component",
          "description": "The component to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "distro_versions": {
          "description": "The distribution version that packages found on this upstream could be associated with.",
          "type": "array",
          "items": {
            "description": "The distribution version that packages found on this upstream could be associated with.",
            "type": "string"
          },
          "uniqueItems": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When true, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_distribution": {
          "title": "Upstream distribution",
          "description": "The distribution to fetch from the upstream",
          "type": "string",
          "maxLength": 64,
          "minLength": 1,
          "x-nullable": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DockerUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Certificate and Key"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DockerUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_certificate": {
          "title": "Auth certificate",
          "description": "X.509 Certificate to use for mTLS authentication against the upstream",
          "type": "string",
          "minLength": 1
        },
        "auth_certificate_key": {
          "title": "Auth certificate key",
          "description": "Certificate key to use for mTLS authentication against the upstream",
          "type": "string",
          "minLength": 1
        },
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Certificate and Key"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "DockerUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_certificate": {
          "title": "Auth certificate",
          "description": "X.509 Certificate to use for mTLS authentication against the upstream",
          "type": "string",
          "minLength": 1
        },
        "auth_certificate_key": {
          "title": "Auth certificate key",
          "description": "Certificate key to use for mTLS authentication against the upstream",
          "type": "string",
          "minLength": 1
        },
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Certificate and Key"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "GoUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "GoUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "GoUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HelmUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HelmUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HelmUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HexUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HexUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HexUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HuggingfaceUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HuggingfaceUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "HuggingfaceUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "MavenUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy",
            "Cache Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verification_status": {
          "title": "Verification status",
          "description": "The signature verification status for this upstream.",
          "type": "string",
          "enum": [
            "Unknown",
            "Invalid",
            "Valid",
            "Invalid (No Key)"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "MavenUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy",
            "Cache Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "MavenUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy",
            "Cache Only"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NpmUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NpmUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NpmUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password",
            "Token"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NugetUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NugetUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "NugetUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "PythonUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "PythonUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "PythonUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RpmUpstream": {
      "required": [
        "distro_version",
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "distro_version": {
          "title": "Distro version",
          "description": "The distribution version that packages found on this upstream will be associated with.",
          "type": "string"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When checked, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verification_status": {
          "title": "Verification status",
          "description": "The signature verification status for this upstream.",
          "type": "string",
          "enum": [
            "Unknown",
            "Invalid",
            "Valid",
            "Invalid (No Key)"
          ],
          "readOnly": true,
          "default": "Unknown"
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RpmUpstreamRequest": {
      "required": [
        "distro_version",
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "distro_version": {
          "title": "Distro version",
          "description": "The distribution version that packages found on this upstream will be associated with.",
          "type": "string"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When checked, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RpmUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "distro_version": {
          "title": "Distro version",
          "description": "The distribution version that packages found on this upstream will be associated with.",
          "type": "string"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "gpg_key_inline": {
          "title": "GPG Key",
          "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "x-nullable": true
        },
        "gpg_key_url": {
          "title": "GPG Key URL",
          "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
          "type": "string",
          "format": "uri",
          "maxLength": 254,
          "x-nullable": true
        },
        "gpg_verification": {
          "title": "Gpg verification",
          "description": "The GPG signature verification mode for this upstream.",
          "type": "string",
          "enum": [
            "Allow All",
            "Warn on Invalid",
            "Reject Invalid"
          ],
          "default": "Allow All"
        },
        "include_sources": {
          "title": "Source Packages",
          "description": "When checked, source packages will be available from this upstream.",
          "type": "boolean"
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RubyUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RubyUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RubyUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "SwiftUpstream": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "created_at": {
          "title": "Created at",
          "description": "The datetime the upstream source was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "string",
          "enum": [
            "N/A",
            "Upstream points to its own repository",
            "Missing upstream source",
            "Upstream was disabled by request of user"
          ],
          "readOnly": true,
          "default": "N/A"
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "pending_validation": {
          "title": "Pending validation",
          "description": "When true, this upstream source is pending validation.",
          "type": "boolean",
          "readOnly": true
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "SwiftUpstreamRequest": {
      "required": [
        "name",
        "upstream_url"
      ],
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "SwiftUpstreamRequestPatch": {
      "type": "object",
      "properties": {
        "auth_mode": {
          "title": "Auth mode",
          "description": "The authentication mode to use when accessing this upstream. ",
          "type": "string",
          "enum": [
            "None",
            "Username and Password"
          ],
          "default": "None"
        },
        "auth_secret": {
          "title": "Secret",
          "description": "Secret to provide with requests to upstream.",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        },
        "auth_username": {
          "title": "Username",
          "description": "Username to provide with requests to upstream.",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_1": {
          "title": "Header #1",
          "description": "The key for extra header #1 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_header_2": {
          "title": "Header #2",
          "description": "The key for extra header #2 to send to upstream.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "extra_value_1": {
          "title": "Value #1",
          "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "extra_value_2": {
          "title": "Value #2",
          "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 128,
          "x-nullable": true
        },
        "is_active": {
          "title": "Is active",
          "description": "Whether or not this upstream is active and ready for requests.",
          "type": "boolean"
        },
        "mode": {
          "title": "Mode",
          "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
          "type": "string",
          "enum": [
            "Proxy Only",
            "Cache and Proxy"
          ],
          "default": "Proxy Only"
        },
        "name": {
          "title": "Name",
          "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
          "type": "string",
          "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
          "maxLength": 64,
          "minLength": 1
        },
        "priority": {
          "title": "Priority",
          "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
          "type": "integer",
          "maximum": 32767,
          "minimum": 1
        },
        "upstream_url": {
          "title": "Upstream URL",
          "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
          "type": "boolean"
        }
      }
    },
    "RepositoryX509EcdsaCertificate": {
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "If selected this is the active key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "certificate": {
          "title": "Certificate",
          "description": "The issued certificate.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_chain": {
          "title": "Certificate chain",
          "description": "Base64 encoded CA certificate chain.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_chain_fingerprint": {
          "title": "Certificate chain fingerprint",
          "type": "string",
          "readOnly": true
        },
        "certificate_chain_fingerprint_short": {
          "title": "Certificate chain fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "certificate_fingerprint": {
          "title": "Certificate fingerprint",
          "description": "The SHA-256 long identifier used",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_fingerprint_short": {
          "title": "Certificate fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "issuing_status": {
          "title": "Issuing status",
          "type": "string",
          "enum": [
            "Certificate is pending to be issued",
            "Certificate successfully issued",
            "Error issuing certificate"
          ],
          "default": "Certificate is pending to be issued"
        }
      }
    },
    "RepositoryX509RsaCertificate": {
      "type": "object",
      "properties": {
        "active": {
          "title": "Active",
          "description": "If selected this is the active key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "certificate": {
          "title": "Certificate",
          "description": "The issued certificate.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_chain": {
          "title": "Certificate chain",
          "description": "Base64 encoded CA certificate chain.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_chain_fingerprint": {
          "title": "Certificate chain fingerprint",
          "type": "string",
          "readOnly": true
        },
        "certificate_chain_fingerprint_short": {
          "title": "Certificate chain fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "certificate_fingerprint": {
          "title": "Certificate fingerprint",
          "description": "The SHA-256 long identifier used",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "certificate_fingerprint_short": {
          "title": "Certificate fingerprint short",
          "type": "string",
          "readOnly": true
        },
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "default": {
          "title": "Default",
          "description": "If selected this is the default key for this repository.",
          "type": "boolean",
          "readOnly": true
        },
        "issuing_status": {
          "title": "Issuing status",
          "type": "string",
          "enum": [
            "Certificate is pending to be issued",
            "Certificate successfully issued",
            "Error issuing certificate"
          ],
          "default": "Certificate is pending to be issued"
        }
      }
    },
    "RepositoryRetentionRules": {
      "type": "object",
      "properties": {
        "retention_count_limit": {
          "title": "Retention count limit",
          "description": "The maximum X number of packages to retain.",
          "type": "integer",
          "maximum": 10000,
          "minimum": 0
        },
        "retention_days_limit": {
          "title": "Retention days limit",
          "description": "The X number of days of packages to retain.",
          "type": "integer",
          "maximum": 180,
          "minimum": 0
        },
        "retention_enabled": {
          "title": "Retention Enabled?",
          "description": "If checked, the retention lifecycle rules will be activated for the repository. Any packages that don't match will be deleted automatically, and the rest are retained.",
          "type": "boolean"
        },
        "retention_group_by_format": {
          "title": "Retention group by format",
          "description": "If checked, retention will apply to packages by package formats rather than across all package formats.For example, when retaining by a limit of 1 and you upload PythonPkg 1.0 and RubyPkg 1.0, no packages are deleted because they are different formats.",
          "type": "boolean"
        },
        "retention_group_by_name": {
          "title": "Retention Group By Name?",
          "description": "If checked, retention will apply to groups of packages by name rather than all packages.\u003Cbr\u003EFor example, when retaining by a limit of 1 and you upload PkgA 1.0, PkgB 1.0 and PkgB 1.1; only PkgB 1.0 is deleted because there are two (2) PkgBs and one (1) PkgA.",
          "type": "boolean"
        },
        "retention_group_by_package_type": {
          "title": "Retention Group By Package Type?",
          "description": "If checked, retention will apply to packages by package type (e.g. by binary, by source, etc.), rather than across all package types for one or more formats. \u003Cbr\u003EFor example, when retaining by a limit of 1 and you upload DebPackage 1.0 and DebSourcePackage 1.0, no packages are deleted because they are different package types, binary and source respectively.",
          "type": "boolean"
        },
        "retention_package_query_string": {
          "title": "Retention package query string",
          "description": "A package search expression which, if provided, filters the packages to be deleted.\u003Cbr\u003EFor example, a search expression of `name:foo` will result in only packages called 'foo' being deleted, or a search expression of `tag:~latest` will prevent any packages tagged 'latest' from being deleted.\u003Cbr\u003ERefer to the Cloudsmith documentation for package query syntax.",
          "type": "string",
          "x-nullable": true
        },
        "retention_size_limit": {
          "title": "Retention size limit",
          "description": "The maximum X total size (in bytes) of packages to retain.",
          "type": "integer",
          "maximum": 21474836480,
          "minimum": 0
        }
      }
    },
    "RepositoryRetentionRulesRequestPatch": {
      "type": "object",
      "properties": {
        "retention_count_limit": {
          "title": "Retention count limit",
          "description": "The maximum X number of packages to retain.",
          "type": "integer",
          "maximum": 10000,
          "minimum": 0
        },
        "retention_days_limit": {
          "title": "Retention days limit",
          "description": "The X number of days of packages to retain.",
          "type": "integer",
          "maximum": 180,
          "minimum": 0
        },
        "retention_enabled": {
          "title": "Retention Enabled?",
          "description": "If checked, the retention lifecycle rules will be activated for the repository. Any packages that don't match will be deleted automatically, and the rest are retained.",
          "type": "boolean"
        },
        "retention_group_by_format": {
          "title": "Retention group by format",
          "description": "If checked, retention will apply to packages by package formats rather than across all package formats.For example, when retaining by a limit of 1 and you upload PythonPkg 1.0 and RubyPkg 1.0, no packages are deleted because they are different formats.",
          "type": "boolean"
        },
        "retention_group_by_name": {
          "title": "Retention Group By Name?",
          "description": "If checked, retention will apply to groups of packages by name rather than all packages.\u003Cbr\u003EFor example, when retaining by a limit of 1 and you upload PkgA 1.0, PkgB 1.0 and PkgB 1.1; only PkgB 1.0 is deleted because there are two (2) PkgBs and one (1) PkgA.",
          "type": "boolean"
        },
        "retention_group_by_package_type": {
          "title": "Retention Group By Package Type?",
          "description": "If checked, retention will apply to packages by package type (e.g. by binary, by source, etc.), rather than across all package types for one or more formats. \u003Cbr\u003EFor example, when retaining by a limit of 1 and you upload DebPackage 1.0 and DebSourcePackage 1.0, no packages are deleted because they are different package types, binary and source respectively.",
          "type": "boolean"
        },
        "retention_package_query_string": {
          "title": "Retention package query string",
          "description": "A package search expression which, if provided, filters the packages to be deleted.\u003Cbr\u003EFor example, a search expression of `name:foo` will result in only packages called 'foo' being deleted, or a search expression of `tag:~latest` will prevent any packages tagged 'latest' from being deleted.\u003Cbr\u003ERefer to the Cloudsmith documentation for package query syntax.",
          "type": "string",
          "x-nullable": true
        },
        "retention_size_limit": {
          "title": "Retention size limit",
          "description": "The maximum X total size (in bytes) of packages to retain.",
          "type": "integer",
          "maximum": 21474836480,
          "minimum": 0
        }
      }
    },
    "RepositoryTransferRegionRequest": {
      "type": "object",
      "properties": {
        "storage_region": {
          "title": "Storage region",
          "description": "The Cloudsmith region in which package files are stored.",
          "type": "string",
          "default": "default"
        }
      }
    },
    "RepositoryTransferRegion": {
      "type": "object",
      "properties": {
        "storage_region": {
          "title": "Storage region",
          "description": "The Cloudsmith region in which package files are stored.",
          "type": "string",
          "default": "default"
        }
      }
    },
    "StatusBasic": {
      "type": "object",
      "properties": {
        "detail": {
          "title": "Detail",
          "description": "The message describing the state of the API.",
          "type": "string",
          "readOnly": true,
          "default": "Cloudsmith API is operational.",
          "minLength": 1
        },
        "version": {
          "title": "Version",
          "description": "The current version for the Cloudsmith service.",
          "type": "string",
          "readOnly": true,
          "default": "1.783.0",
          "minLength": 1
        }
      }
    },
    "StorageRegion": {
      "required": [
        "label",
        "slug"
      ],
      "type": "object",
      "properties": {
        "label": {
          "title": "Label",
          "description": "Name of the storage region",
          "type": "string",
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "description": "Slug for the storage region",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserBrief": {
      "type": "object",
      "properties": {
        "authenticated": {
          "title": "Authenticated",
          "description": "If true then you're logged in as a user.",
          "type": "boolean",
          "readOnly": true
        },
        "email": {
          "title": "Email address",
          "description": "Your email address that we use to contact you. This is only visible to you.",
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 1,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "description": "The full name of the user (if any).",
          "type": "string",
          "readOnly": true,
          "minLength": 1,
          "x-nullable": true
        },
        "profile_url": {
          "title": "Profile url",
          "description": "The URL for the full profile of the user.",
          "type": "string",
          "format": "uri",
          "readOnly": true,
          "x-nullable": true
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "readOnly": true
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      }
    },
    "UserAuthTokenRequest": {
      "type": "object",
      "properties": {
        "email": {
          "title": "Email",
          "description": "Email address to authenticate with",
          "type": "string",
          "format": "email",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "description": "Password to authenticate with",
          "type": "string",
          "minLength": 1
        },
        "totp_token": {
          "title": "Two-factor code",
          "description": "Two-factor authentication code",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "UserAuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "title": "Token",
          "description": "API token for the authenticated user",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "two_factor_required": {
          "title": "Two factor required",
          "description": "Flag indicating whether a 2FA code is required to complete authentication",
          "type": "boolean",
          "readOnly": true
        },
        "two_factor_token": {
          "title": "Two factor token",
          "description": "Token to use when providing 2FA code",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "UserAuthenticationToken": {
      "type": "object",
      "properties": {
        "created": {
          "title": "Created",
          "description": "The time at which the API key was created.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "key": {
          "title": "Key",
          "description": "The unique API key used for authentication. This will be obfuscated on read-only HTTP methods.",
          "type": "string",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "description": "The slug_perm for token.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "UserProfile": {
      "required": [
        "first_name",
        "last_name"
      ],
      "type": "object",
      "properties": {
        "company": {
          "title": "Company",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "first_name": {
          "title": "First name",
          "type": "string",
          "maxLength": 120,
          "minLength": 1
        },
        "job_title": {
          "title": "Job title",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "joined_at": {
          "title": "Joined at",
          "type": "string",
          "format": "date-time"
        },
        "last_name": {
          "title": "Last name",
          "type": "string",
          "maxLength": 120,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "slug": {
          "title": "Slug",
          "type": "string",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "readOnly": true
        },
        "tagline": {
          "title": "Tagline",
          "description": "Your tagline is a sentence about you. Make it funny. Make it professional. Either way, it's public and it represents who you are.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "url": {
          "title": "Url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        }
      }
    },
    "VulnerabilityScanResultsList": {
      "required": [
        "identifier",
        "package",
        "scan_id"
      ],
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "description": "The time this scan result was stored.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "has_vulnerabilities": {
          "title": "Has vulnerabilities",
          "description": "Do the results contain any known vulnerabilities?",
          "type": "boolean",
          "readOnly": true
        },
        "identifier": {
          "title": "Identifier",
          "type": "string",
          "minLength": 1
        },
        "max_severity": {
          "title": "Max severity",
          "type": "string",
          "enum": [
            "Unknown",
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Unknown"
        },
        "num_vulnerabilities": {
          "title": "Num vulnerabilities",
          "type": "integer",
          "default": 0
        },
        "package": {
          "$ref": "#/definitions/PackageVulnerability"
        },
        "scan_id": {
          "title": "Scan id",
          "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "VulnerabilityScanVersion": {
      "required": [
        "major",
        "minor",
        "patch"
      ],
      "type": "object",
      "properties": {
        "major": {
          "title": "Major",
          "type": "integer"
        },
        "minor": {
          "title": "Minor",
          "type": "integer"
        },
        "operator": {
          "title": "Operator",
          "type": "string",
          "default": "",
          "maxLength": 32
        },
        "patch": {
          "title": "Patch",
          "type": "integer"
        },
        "raw_version": {
          "title": "Raw version",
          "type": "string",
          "default": "",
          "maxLength": 1024
        },
        "version": {
          "title": "Version",
          "type": "string",
          "default": "",
          "maxLength": 1024
        }
      }
    },
    "Vulnerability": {
      "required": [
        "affected_version",
        "description",
        "fixed_version",
        "package_name",
        "references",
        "severity_source",
        "title",
        "vulnerability_id"
      ],
      "type": "object",
      "properties": {
        "affected_version": {
          "$ref": "#/definitions/VulnerabilityScanVersion"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 1028,
          "minLength": 1
        },
        "fixed_version": {
          "$ref": "#/definitions/VulnerabilityScanVersion"
        },
        "package_name": {
          "title": "Package name",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "references": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 2048,
            "minLength": 1
          }
        },
        "severity": {
          "title": "Severity",
          "type": "string",
          "enum": [
            "Unknown",
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Unknown"
        },
        "severity_source": {
          "title": "Severity source",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "title": {
          "title": "Title",
          "type": "string",
          "maxLength": 512,
          "minLength": 1
        },
        "vulnerability_id": {
          "title": "Vulnerability id",
          "type": "string",
          "maxLength": 13,
          "minLength": 1
        }
      }
    },
    "VulnerabilityScan": {
      "required": [
        "results",
        "target",
        "type"
      ],
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vulnerability"
          }
        },
        "target": {
          "title": "Target",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "title": "Type",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "VulnerabilityScanResults": {
      "required": [
        "identifier",
        "package",
        "scan_id",
        "scans"
      ],
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "description": "The time this scan result was stored.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "has_vulnerabilities": {
          "title": "Has vulnerabilities",
          "description": "Do the results contain any known vulnerabilities?",
          "type": "boolean",
          "readOnly": true
        },
        "identifier": {
          "title": "Identifier",
          "type": "string",
          "minLength": 1
        },
        "max_severity": {
          "title": "Max severity",
          "type": "string",
          "enum": [
            "Unknown",
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "default": "Unknown"
        },
        "num_vulnerabilities": {
          "title": "Num vulnerabilities",
          "type": "integer",
          "default": 0
        },
        "package": {
          "$ref": "#/definitions/PackageVulnerability"
        },
        "scan_id": {
          "title": "Scan id",
          "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
          "type": "integer",
          "x-nullable": true
        },
        "scans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerabilityScan"
          }
        }
      }
    },
    "WebhookTemplate": {
      "required": [
        "event"
      ],
      "type": "object",
      "properties": {
        "event": {
          "title": "Event",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "template": {
          "title": "Template",
          "type": "string",
          "maxLength": 4096,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "RepositoryWebhook": {
      "required": [
        "events",
        "target_url",
        "templates"
      ],
      "type": "object",
      "properties": {
        "created_at": {
          "title": "Created at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "created_by_url": {
          "title": "Created by url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "disable_reason": {
          "title": "Disable reason",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6],
          "readOnly": true
        },
        "disable_reason_str": {
          "title": "Disable reason str",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "*",
              "package.created",
              "package.deleted",
              "package.downloaded",
              "package.failed",
              "package.quarantined",
              "package.released",
              "package.restored",
              "package.security_scanned",
              "package.synced",
              "package.syncing",
              "package.tags_updated"
            ]
          },
          "x-nullable": true
        },
        "identifier": {
          "title": "Identifier",
          "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified a webhook request within a repository.",
          "type": "integer",
          "readOnly": true,
          "x-nullable": true
        },
        "is_active": {
          "title": "Webhook Active",
          "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
          "type": "boolean"
        },
        "is_last_response_bad": {
          "title": "Is last response bad",
          "type": "boolean",
          "readOnly": true
        },
        "last_response_status": {
          "title": "Last response status",
          "type": "integer",
          "readOnly": true
        },
        "last_response_status_str": {
          "title": "Last response status str",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "num_sent": {
          "title": "Num sent",
          "type": "integer",
          "readOnly": true
        },
        "package_query": {
          "title": "Package query",
          "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "request_body_format": {
          "title": "Payload Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
          "type": "integer",
          "enum": [0, 1, 2, 3]
        },
        "request_body_format_str": {
          "title": "Request body format str",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "request_body_template_format": {
          "title": "Payload Template Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
          "type": "integer",
          "enum": [0, 1, 2]
        },
        "request_body_template_format_str": {
          "title": "Request body template format str",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "request_content_type": {
          "title": "Content Type Header Value",
          "description": "The value that will be sent for the 'Content Type' header. ",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        },
        "secret_header": {
          "title": "Secret Header",
          "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "self_url": {
          "title": "Self url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "slug_perm": {
          "title": "Slug perm",
          "type": "string",
          "format": "slug",
          "pattern": "^[-a-zA-Z0-9_]+$",
          "readOnly": true,
          "minLength": 1
        },
        "target_url": {
          "title": "Payload URL",
          "description": "The destination URL that webhook payloads will be POST'ed to.",
          "type": "string",
          "format": "uri",
          "maxLength": 255,
          "minLength": 1
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTemplate"
          },
          "x-nullable": true
        },
        "updated_at": {
          "title": "Updated at",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updated_by": {
          "title": "Updated by",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "updated_by_url": {
          "title": "Updated by url",
          "type": "string",
          "format": "uri",
          "readOnly": true
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
          "type": "boolean"
        }
      }
    },
    "RepositoryWebhookRequest": {
      "required": [
        "events",
        "target_url",
        "templates"
      ],
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "*",
              "package.created",
              "package.deleted",
              "package.downloaded",
              "package.failed",
              "package.quarantined",
              "package.released",
              "package.restored",
              "package.security_scanned",
              "package.synced",
              "package.syncing",
              "package.tags_updated"
            ]
          },
          "x-nullable": true
        },
        "is_active": {
          "title": "Webhook Active",
          "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
          "type": "boolean"
        },
        "package_query": {
          "title": "Package query",
          "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "request_body_format": {
          "title": "Payload Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
          "type": "integer",
          "enum": [0, 1, 2, 3]
        },
        "request_body_template_format": {
          "title": "Payload Template Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
          "type": "integer",
          "enum": [0, 1, 2]
        },
        "request_content_type": {
          "title": "Content Type Header Value",
          "description": "The value that will be sent for the 'Content Type' header. ",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        },
        "secret_header": {
          "title": "Secret Header",
          "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "secret_value": {
          "title": "Secret Value",
          "description": "The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 512,
          "x-nullable": true
        },
        "signature_key": {
          "title": "HMAC Signature Key",
          "description": "The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).",
          "type": "string",
          "maxLength": 512,
          "minLength": 1
        },
        "target_url": {
          "title": "Payload URL",
          "description": "The destination URL that webhook payloads will be POST'ed to.",
          "type": "string",
          "format": "uri",
          "maxLength": 255,
          "minLength": 1
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTemplate"
          },
          "x-nullable": true
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
          "type": "boolean"
        }
      }
    },
    "RepositoryWebhookRequestPatch": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "*",
              "package.created",
              "package.deleted",
              "package.downloaded",
              "package.failed",
              "package.quarantined",
              "package.released",
              "package.restored",
              "package.security_scanned",
              "package.synced",
              "package.syncing",
              "package.tags_updated"
            ]
          },
          "x-nullable": true
        },
        "is_active": {
          "title": "Webhook Active",
          "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
          "type": "boolean"
        },
        "package_query": {
          "title": "Package query",
          "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
          "type": "string",
          "maxLength": 1024,
          "x-nullable": true
        },
        "request_body_format": {
          "title": "Payload Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
          "type": "integer",
          "enum": [0, 1, 2, 3]
        },
        "request_body_template_format": {
          "title": "Payload Template Format",
          "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
          "type": "integer",
          "enum": [0, 1, 2]
        },
        "request_content_type": {
          "title": "Content Type Header Value",
          "description": "The value that will be sent for the 'Content Type' header. ",
          "type": "string",
          "maxLength": 128,
          "x-nullable": true
        },
        "secret_header": {
          "title": "Secret Header",
          "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
          "type": "string",
          "pattern": "^[-\\w]+$",
          "maxLength": 64,
          "x-nullable": true
        },
        "secret_value": {
          "title": "Secret Value",
          "description": "The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.",
          "type": "string",
          "pattern": "^[^\\n\\r]+$",
          "maxLength": 512,
          "x-nullable": true
        },
        "signature_key": {
          "title": "HMAC Signature Key",
          "description": "The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).",
          "type": "string",
          "maxLength": 512,
          "minLength": 1
        },
        "target_url": {
          "title": "Payload URL",
          "description": "The destination URL that webhook payloads will be POST'ed to.",
          "type": "string",
          "format": "uri",
          "maxLength": 255,
          "minLength": 1
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTemplate"
          },
          "x-nullable": true
        },
        "verify_ssl": {
          "title": "Verify SSL Certificates",
          "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
          "type": "boolean"
        }
      }
    }
  }
}
